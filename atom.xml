<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小杨学习笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-13T13:17:37.170Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杨生华</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于Git文件管理</title>
    <link href="http://yoursite.com/2020/02/12/git/%E5%85%B3%E4%BA%8EGit%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2020/02/12/git/%E5%85%B3%E4%BA%8EGit%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</id>
    <published>2020-02-12T11:25:36.000Z</published>
    <updated>2020-02-13T13:17:37.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git中的文件分类"><a href="#git中的文件分类" class="headerlink" title="git中的文件分类"></a>git中的文件分类</h3><p>​    Git将所有文件分为3类：已追踪的、被忽略的以及未追踪的</p><ul><li><p>已追踪的</p><p>已追踪的文件是指已经在版本库中的文件，或者是已暂存到索引中的文件。如果想将新文件<strong><code>newfile</code></strong>添加到已追踪的文件，执行 <strong><code>git add newfile</code></strong>即可</p></li><li><p>被忽略的</p><p>被忽略的文件必须在版本库中明确声明为不可见或被忽略，即使他可能会在工作目录中出现。一个软件项目通常都会有很多被忽略的文件。普通被忽略的文件包括临时文件、个人笔记、编译器输出文件以及构建过程中自动生成的大多数文件。Git维护一个默认的忽略文件列表，也可以配置版本库来识别其他文件。被忽略的文件会在后面介绍。</p></li><li><p>未追踪的</p><p>未追踪的文件是指那些不在版本库中的文件。</p></li></ul><p>下面举一个栗子:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">nothing to commit (create/copy files and use "git add" to track)</span><br><span class="line"><span class="meta">#</span><span class="bash">添加一个文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"new Data"</span> &gt;&gt; data</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Untracked files:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       data</span></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br></pre></td></tr></table></figure><p>为了让Git忽略目录中的文件，只需将该文件名添加到一个特殊的文件<strong><code>.gitignore</code></strong>中就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch main.o</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Untracked files:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       data</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       main.o</span></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br><span class="line"><span class="meta">#</span><span class="bash">将 main.o添加到.gitignore中</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> main.o &gt;&gt; .gitignore</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Untracked files:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       .gitignore</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       data</span></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br></pre></td></tr></table></figure><p>这样main.o就已经被忽略了，但是<strong><code>git status</code></strong>现在显示一个新的未追踪的文件 .gitignore。</p><h2 id="使用-git-add"><a href="#使用-git-add" class="headerlink" title="使用 git add"></a>使用 git add</h2><p><strong><code>git add</code></strong> 命令将暂存一个文件。就Git文件分类而言，如果一个文件是未追踪的，那么<strong><code>git add</code></strong>就会将文件的状态转化为已追踪的。如果git add作用于一个目录名，那么该目录下的文件以及子目录都会递归暂存起来。</p><p>这里还接着上面的栗子:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Untracked files:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       .gitignore</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       data</span></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将data、.gitignore两个文件添加至已追踪的分类</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add data .gitignore</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Changes to be committed:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       new file:   .gitignore</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       new file:   data</span></span><br></pre></td></tr></table></figure><p>在上面的栗子中使用<strong><code>git add</code></strong>后，暂存和追踪data和.gitignore文件，并准备下次提交是时添加到版本库中。</p><p>可以使用<strong><code>git ls-files</code></strong>命令查看隐藏在对象模型下的东西。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git ls-files</span></span><br><span class="line">.gitignore</span><br><span class="line">data</span><br></pre></td></tr></table></figure><p>在任何编辑之后，提交变更之前，请执行一次<strong><code>git add</code></strong>命令。</p><h2 id="使用-git-commit"><a href="#使用-git-commit" class="headerlink" title="使用 git commit"></a>使用 git commit</h2><h3 id="使用-git-commit-–all"><a href="#使用-git-commit-–all" class="headerlink" title="使用 git commit –all"></a>使用 git commit –all</h3><p><strong><code>git commit</code></strong> 的 <strong><code>-a</code></strong>或者 <strong><code>--all</code></strong>选项会导致执行提交之前自动暂存所有未暂存的和未追踪的文件变化，包括从工作副本中删除已追踪的文件</p><p>下面举个栗子:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/tmp/commit-all-example</span><br><span class="line"><span class="meta">#</span><span class="bash">创建测试版本库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line">Initialized empty Git repository in /tmp/commit-all-example/.git/</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Testfile1"</span> &gt;&gt; ready</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Testfile2"</span> &gt;&gt; notyet</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add ready notyet</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"Setup"</span></span></span><br><span class="line">[master (root-commit) 2b00dbf] Setup</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 notyet</span><br><span class="line"> create mode 100644 ready</span><br></pre></td></tr></table></figure><p>之后再次编辑<strong>ready</strong>文件，并用 <strong><code>git add</code></strong>把它添加到版本库中。然后编辑<strong>notyet</strong>文件保持它是未暂存的。</p><p>在一个子目录下添加一个文件，但是不要对它执行<strong><code>git add</code></strong>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir subdir</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Nope"</span> &gt;&gt; subdir/new</span></span><br></pre></td></tr></table></figure><p>当执行 <strong><code>git commit --all</code></strong>命令，Git会递归遍历整个版本库，暂存所有先前通过<strong><code>git add</code></strong>提交的已知的和修改的文件，然后提交它们，由于<strong>subdir/</strong> 一个全新的目录，而且目录下没有任何文件名或路径通过<strong><code>git add</code></strong>和<strong><code>git commit</code></strong>进行操作的，</p><p>So 即使是 –all选项也不能将其提交。</p><h3 id="关于提交日志消息"><a href="#关于提交日志消息" class="headerlink" title="关于提交日志消息"></a>关于提交日志消息</h3><p>​    如果不通过命令行直接提供日志消息（例如:<strong><code>git commit -m &quot;提交日志消息&quot;</code></strong>），Git会启动编辑器，并提示你写一个提交日志。</p><h2 id="使用-git-rm-命令"><a href="#使用-git-rm-命令" class="headerlink" title="使用 git rm 命令"></a>使用 git rm 命令</h2><p>​       git rm命令会在版本库中和目录中同时删除文件。</p><p>接着上面的栗子:</p><p>这里“意外”的添加了一个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Random"</span> &gt; oops</span></span><br><span class="line"><span class="meta">#</span><span class="bash">当执行git rm oops时，提示删除失败</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm oops</span></span><br><span class="line">fatal: pathspec 'oops' did not match any files</span><br></pre></td></tr></table></figure><p>​    为什么会这样，可以通过<strong><code>git ls-files</code></strong>命令查看版本库中的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git ls-files</span></span><br><span class="line">notyet</span><br><span class="line">ready</span><br></pre></td></tr></table></figure><p>现在的版本库中没有<strong>oops</strong>这个文件，可通过<strong>git add oops</strong>命令将 oops文件加入到版本库中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add oops</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git ls-files</span></span><br><span class="line">notyet</span><br><span class="line">oops</span><br><span class="line">ready</span><br></pre></td></tr></table></figure><p>另外，要将一个文件由已暂存的转化为未暂存的,可以使用<strong><code>git rm --cached</code></strong>命令</p><p>比如要删除oops</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm --cached oops</span></span><br><span class="line">rm 'oops'</span><br></pre></td></tr></table></figure><p><strong><code>git rm --cached</code></strong>会删除索引中的文件并它文件保留在工作目录中，而<strong><code>git rm</code></strong>则会将文件从索引和工作目录中都删除。</p><p>如果想要删除一个已经提交的文件，通过简单的<strong><code>git rm filename</code></strong>命令来暂存这一请求</p><blockquote><p>还可以使用 <strong><code>git rm -f</code></strong>来强制删除文件。</p></blockquote><p>如果想保留的文件不小心删除了，可以通过版本控制系统的恢复功能进行恢复</p><p>具体的命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 加入不小心删除了oops文件</span><br><span class="line"># 可以是下面的命令进行恢复</span><br><span class="line">git checkout HEAD -- oops</span><br></pre></td></tr></table></figure><h2 id="使用-git-mv"><a href="#使用-git-mv" class="headerlink" title="使用 git mv"></a>使用 git mv</h2><p>如果想要给一个文件重命名可以使用<strong><code>git mv srcfile newfile</code></strong>，git mv 命令会将 <strong>srcfile</strong>文件的文件名称改为<strong>newfiles</strong>，Git会在索引中删除<strong>srcfile</strong>文件的路径名，并添加<strong>newfile</strong>的路径名，至于srcfile文件里的内容，Git仍然会保存在对象库中，然后才会将它与newfile重新关联。git mv 还可以移动一个文件到一个目录中：<strong><code>git mv srcfile dir/</code></strong></p><h2 id="gitignore-文件"><a href="#gitignore-文件" class="headerlink" title=".gitignore 文件"></a>.gitignore 文件</h2><p>在前面简单介绍过<strong>.gitignore</strong>文件的作用。可以通过<strong>.gitignore</strong>文件来忽略不相干的文件。Git还支持一种更丰富的机制，一个<strong>.gitignore</strong>文件下可以包含一个文件名模式列表，指定哪些文件需要忽略。<strong>.gitignore</strong> 文件的格式如下。</p><ul><li>空行会被忽略，而以（#）号开头的行可以用于注释。然而，如果#跟在其他文本后面，它就不代表注释了。</li><li>一个简单的字面置文件名匹配任何目录中的同名文件。</li><li>目录名由末尾的（/）标记。这能匹配同名的目录和子目录，但不匹配文件或符号链接。</li><li>包含shell通配符，如（*）号，这种模式可扩展为shell通配模式。正如标准shell通配符一样，因为不能跨目录匹配，所以一个 * 只能匹配一个文件或目录名。</li><li>起始的 ！号会对该行其余部分的模式进行取反。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;git中的文件分类&quot;&gt;&lt;a href=&quot;#git中的文件分类&quot; class=&quot;headerlink&quot; title=&quot;git中的文件分类&quot;&gt;&lt;/a&gt;git中的文件分类&lt;/h3&gt;&lt;p&gt;​    Git将所有文件分为3类：已追踪的、被忽略的以及未追踪的&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git快速入门</title>
    <link href="http://yoursite.com/2020/02/11/git/Git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2020/02/11/git/Git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2020-02-11T09:56:07.000Z</published>
    <updated>2020-02-12T11:48:16.646Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h2 id="1-Git命令行"><a href="#1-Git命令行" class="headerlink" title="1 Git命令行"></a>1 Git命令行</h2><p>git简单易用，只要在终端输入$ <code>Git</code>，Git就会不带任何参数输出它的选项和常用的子命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ git</span><br><span class="line"><span class="comment">#输入git后会输出一下选项，如果要得到一个完整的git子命令列表，可以输入 git help --all</span></span><br><span class="line">usage: git [--version] [--<span class="built_in">help</span>] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]</span><br><span class="line">           [--<span class="built_in">exec</span>-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class="line">           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]</span><br><span class="line">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class="line">           &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;]</span><br><span class="line">These are common Git commands used <span class="keyword">in</span> various situations:</span><br><span class="line">start a working area (see also: git <span class="built_in">help</span> tutorial)</span><br><span class="line">   <span class="built_in">clone</span>      Clone a repository into a new directory</span><br><span class="line">   init       Create an empty Git repository or reinitialize an existing one</span><br><span class="line">work on the current change (see also: git <span class="built_in">help</span> everyday)</span><br><span class="line">   add        Add file contents to the index</span><br><span class="line">   mv         Move or rename a file, a directory, or a symlink</span><br><span class="line">   reset      Reset current HEAD to the specified state</span><br><span class="line">   rm         Remove files from the working tree and from the index</span><br><span class="line">examine the <span class="built_in">history</span> and state (see also: git <span class="built_in">help</span> revisions)</span><br><span class="line">   bisect     Use binary search to find the commit that introduced a bug</span><br><span class="line">   grep       Print lines matching a pattern</span><br><span class="line">   <span class="built_in">log</span>        Show commit logs</span><br><span class="line">   show       Show various types of objects</span><br><span class="line">   status     Show the working tree status</span><br><span class="line">grow, mark and tweak your common <span class="built_in">history</span></span><br><span class="line">   branch     List, create, or delete branches</span><br><span class="line">   checkout   Switch branches or restore working tree files</span><br><span class="line">   commit     Record changes to the repository</span><br><span class="line">   diff       Show changes between commits, commit and working tree, etc</span><br><span class="line">   merge      Join two or more development histories together</span><br><span class="line">collaborate (see also: git <span class="built_in">help</span> workflows)</span><br><span class="line">   fetch      Download objects and refs from another repository</span><br><span class="line">   pull       Fetch from and integrate with another repository or a <span class="built_in">local</span> branch</span><br><span class="line">   push       Update remote refs along with associated objects .....</span><br></pre></td></tr></table></figure><ul><li><h2 id="2-Git使用快速入门"><a href="#2-Git使用快速入门" class="headerlink" title="2 Git使用快速入门"></a>2 Git使用快速入门</h2><ul><li><h4 id="2-1创建初始版本库"><a href="#2-1创建初始版本库" class="headerlink" title="2.1创建初始版本库"></a>2.1创建初始版本库</h4><p>首先在git终端下创建一个空文件夹:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建空文件夹 test/</span></span><br><span class="line">$ mkdir -p <span class="built_in">test</span>/</span><br><span class="line"><span class="comment">#进入到test文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span>/</span><br><span class="line"><span class="comment">#执行git init命令</span></span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /root/<span class="built_in">test</span>/.git/</span><br></pre></td></tr></table></figure><p>Git不会关心文件夹里是否为空，执行<code>git init</code> 命令创建了一个隐藏目录，在项目目录的顶层有个名为 <code>.git</code>文件夹，Git把所有修订的信息都放在这唯一的顶层目录里</p></li><li><h4 id="2-2-将文件添加到版本库中"><a href="#2-2-将文件添加到版本库中" class="headerlink" title="2.2 将文件添加到版本库中"></a>2.2 将文件添加到版本库中</h4><p>执行 git init 命令时，Git版本库都是空的，为了管理内容，需要明确的把内容放入版本库中。</p><p>使用 <code>git add file</code>[^1] 将file添加到版本库中。</p><p>例如:</p><p>在 <code>test</code>目录中创建一个文件<code>index.html</code>并把该文件添加到版本库中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span>/</span><br><span class="line">$ touch index.html</span><br><span class="line">$ git add index.html</span><br></pre></td></tr></table></figure><p>[^1 ]: 如果目录中已经有很多的文件，使用<code>git add .</code>命令让Git把当前的目录及子目录中的文件都添加到版本库中</p><p>运行<code>git status</code> 命令显示中间状态的<code>index.html</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="comment"># 这个命令显示新文件index.html将在下次提交时添加到版本库中</span></span><br></pre></td></tr></table></figure></li><li><h4 id="2-3-版本库内文件的删除和重命名"><a href="#2-3-版本库内文件的删除和重命名" class="headerlink" title="2.3 版本库内文件的删除和重命名"></a>2.3 版本库内文件的删除和重命名</h4><ul><li><h5 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h5><p>执行命令 <code>git rm</code>可以删除版本库里不需要的文件</p><p>操作如下:</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看版本库中的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git ls-files</span></span><br><span class="line">index.html</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行git rm index.html即可删除版本库中的index.html文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm index.html</span></span><br></pre></td></tr></table></figure><ul><li><h5 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h5><p>在终端执行<code>git mv srcfile targetfile</code>即可以完成文件的重命名</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先查看版本库中的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git ls-files</span></span><br><span class="line">index.html</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行git mv index.html foo.html 将index.html修改为foo.html</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git mv index.html foo.html</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次查看版本库文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git ls-files</span></span><br><span class="line">foo.html</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;1-Git命令行&quot;&gt;&lt;a href=&quot;#1-Git命令行&quot; class=&quot;headerlink&quot; title=&quot;1 Git命令行&quot;&gt;&lt;/a&gt;1 Git命令行&lt;/h2&gt;&lt;p&gt;git简单易用，只要在终端输入$ &lt;code&gt;Git&lt;/code&gt;，Git
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用手册</title>
    <link href="http://yoursite.com/2020/02/09/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2020/02/09/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</id>
    <published>2020-02-09T08:04:23.723Z</published>
    <updated>2020-02-10T02:14:57.112Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
