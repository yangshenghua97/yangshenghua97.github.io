<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>楊さんノート</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-27T05:31:09.037Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杨生华</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL基础</title>
    <link href="http://yoursite.com/2020/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/SQL%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/03/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/SQL%E5%9F%BA%E7%A1%80/</id>
    <published>2020-03-27T05:04:38.000Z</published>
    <updated>2020-03-27T05:31:09.037Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要以MySQL数据库进行讲解</p><p>在阅读本文之前假设已经安装MySQL数据库。请先构建好数据源，如果没有安装MYSQL数据库可以通过下面的在线网站构建数据源并练习SQL语句</p><p><strong>SQL在线练习网站：<a href="http://sqlfiddle.com/" target="_blank" rel="noopener">http://sqlfiddle.com/</a></strong></p><p><strong>源数据下载：</strong><a href="https://forta.com/wp-content/uploads/books/0672327120/mysql_scripts.zip" target="_blank" rel="noopener">https://forta.com/wp-content/uploads/books/0672327120/mysql_scripts.zip</a></p><hr><h1 id="SQL语言分类"><a href="#SQL语言分类" class="headerlink" title="SQL语言分类"></a>SQL语言分类</h1><p>SQL语言主要分为三类：</p><ul><li>DML（Data Manipulation Language）：数据操作语言，常用的增删改查就属于DML，操作的对象是数据表中的对象。</li><li>DDL（Data  Definition Language）：数据定义语言。建表，建立数据库就属于DDL</li><li>DCL（Data Control Language）：数据控制语言，提交回滚，数据库安全管理等属于DCL</li></ul><p>本文将逐一介绍这三个SQL语言分类的简单讲解。</p><h1 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h1><h2 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#建products表并插入数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> products</span><br><span class="line">(</span><br><span class="line">  prod_id    <span class="built_in">char</span>(<span class="number">10</span>)      <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  vend_id    <span class="built_in">int</span>           <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</span><br><span class="line">  prod_name  <span class="built_in">char</span>(<span class="number">255</span>)     <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</span><br><span class="line">  prod_price <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</span><br><span class="line">  prod_desc  <span class="built_in">text</span>          <span class="literal">NULL</span> ,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(prod_id)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products(prod_id, vend_id, prod_name, prod_price, prod_desc)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'ANV01'</span>, <span class="number">1001</span>, <span class="string">'.5 ton anvil'</span>, <span class="number">5.99</span>, <span class="string">'.5 ton anvil, black, complete with handy hook'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products(prod_id, vend_id, prod_name, prod_price, prod_desc)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'ANV02'</span>, <span class="number">1001</span>, <span class="string">'1 ton anvil'</span>, <span class="number">9.99</span>, <span class="string">'1 ton anvil, black, complete with handy hook and carrying case'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products(prod_id, vend_id, prod_name, prod_price, prod_desc)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'OL1'</span>, <span class="number">1002</span>, <span class="string">'Oil can'</span>, <span class="number">8.99</span>, <span class="string">'Oil can, red'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products(prod_id, vend_id, prod_name, prod_price, prod_desc)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">'FU1'</span>, <span class="number">1002</span>, <span class="string">'Fuses'</span>, <span class="number">3.42</span>, <span class="string">'1 dozen, extra long'</span>);</span><br></pre></td></tr></table></figure><h3 id="检索单个列"><a href="#检索单个列" class="headerlink" title="检索单个列"></a>检索单个列</h3><p>语法：<strong><code>SELECT 列名 FROM 表名</code></strong></p><p>检索prod_name列</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT prod_name FROM products;</span><br><span class="line"><span class="comment">#结果为</span></span><br><span class="line">|<span class="string">    prod_name </span>|</span><br><span class="line">|<span class="string">--------------</span>|</span><br><span class="line">|<span class="string"> .5 ton anvil </span>|</span><br><span class="line">|<span class="string">  1 ton anvil </span>|</span><br><span class="line">|<span class="string">        Fuses </span>|</span><br><span class="line">|<span class="string">      Oil can </span>|</span><br></pre></td></tr></table></figure><ul><li>上面的语句利用SELECT语句从products表中检索一个列为prod_name。所需列名在<strong><code>SELECT</code></strong>关键字后面给出，<strong><code>FROM</code></strong>关键字指定要从哪个表检索数据</li></ul><h3 id="检索多个列"><a href="#检索多个列" class="headerlink" title="检索多个列"></a>检索多个列</h3><p>语法：<strong><code>SELECT 列名1,列名2... FROM 表名</code></strong></p><ul><li>要从一个表中检索多个列，使用SELECT语句，后面键入多个列名，列名之间必须以逗号隔开</li></ul><blockquote><p>当心逗号：在选择多个列时，一定要在列名之间加逗号，最后一个列名之后不用加</p></blockquote><p>还是以上面的数据源为例，检索prod_id、prod_name两列</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT prod_id,prod_name FROM products;</span><br><span class="line"><span class="comment">#其结果如下：</span></span><br><span class="line">|<span class="string"> prod_id </span>|<span class="string">    prod_name </span>|</span><br><span class="line">|<span class="string">---------</span>|<span class="string">--------------</span>|</span><br><span class="line">|<span class="string">   ANV01 </span>|<span class="string"> .5 ton anvil </span>|</span><br><span class="line">|<span class="string">   ANV02 </span>|<span class="string">  1 ton anvil </span>|</span><br><span class="line">|<span class="string">     FU1 </span>|<span class="string">        Fuses </span>|</span><br><span class="line">|<span class="string">     OL1 </span>|<span class="string">      Oil can </span>|</span><br></pre></td></tr></table></figure><h3 id="检索所有列"><a href="#检索所有列" class="headerlink" title="检索所有列"></a>检索所有列</h3><p>语法：<strong><code>SELECT * FROM 表名</code></strong></p><ul><li>检索所有列时，给定一个通配符（<strong><code>*</code></strong>）,则会检索表中的所有列。</li></ul><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM products;</span><br><span class="line">prod_id | <span class="type">vend_id</span> | <span class="type">prod_name</span>  | <span class="type">prod_price</span>  | <span class="type">prod_desc</span></span><br><span class="line">  ANV01|  <span class="type">1001</span>  | <span class="type">.5</span> ton anvil |  <span class="type">5</span><span class="number">.99</span>| <span class="type">.5</span> ton anvil, black</span><br><span class="line">  ANV02|  <span class="type">1001</span>  | <span class="type">1</span> ton anvil |  <span class="type">9</span><span class="number">.99</span>    | <span class="type">1</span> ton anvil, black</span><br></pre></td></tr></table></figure><h3 id="检索不同的行（DISTINCT）"><a href="#检索不同的行（DISTINCT）" class="headerlink" title="检索不同的行（DISTINCT）"></a>检索不同的行（DISTINCT）</h3><p>语法：<strong><code>SELECT DISTINCT 列名 FROM 表名</code></strong></p><p>要检索出有不同值的列表，使用<strong><code>DISTINCT</code></strong>关键字，此关键字必须直接放在列名的前面。此关键字指示MySQL只返回不同的值，这里的DISTINCT不能部分使用，它应用于所有列而不仅是前置它的列。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT vend_id FROM products;</span><br><span class="line">|<span class="string"> vend_id </span>|</span><br><span class="line">|<span class="string">---------</span>|</span><br><span class="line">|<span class="string">    1001 </span>|</span><br><span class="line">|<span class="string">    1002 </span>|</span><br></pre></td></tr></table></figure><h3 id="限制结果（LIMIT）"><a href="#限制结果（LIMIT）" class="headerlink" title="限制结果（LIMIT）"></a>限制结果（LIMIT）</h3><p>限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。</p><p>语法：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>,列名<span class="number">2</span>,... </span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">LIMIT</span> starts,<span class="built_in">count</span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>count</code></strong>：检索取多少行</p></li><li><p><strong><code>starts</code></strong>：从第几行开始，注意这里的开始行从0开始</p></li></ul><p>返回前五行：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> products <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure><p>带一个值的<strong><code>LIMIT</code></strong>总是从第一行开始，给出的数为返回的行数。带两个值的<strong><code>LIMIT</code></strong>可以指定从行号为第一个值的位置开始。</p><h1 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h1><h2 id="使用WHERE子句"><a href="#使用WHERE子句" class="headerlink" title="使用WHERE子句"></a>使用WHERE子句</h2><p>在SELECT语句中，数据根据<strong><code>WHERE</code></strong>子句中指定的搜索条件进行过滤。WHERE子句在表名后给出。在同时使用<strong><code>ORDER BY</code></strong>和WHERE子句时，应该让ORDER BY位于WHERE之后</p><h3 id="WHERE子句操作符"><a href="#WHERE子句操作符" class="headerlink" title="WHERE子句操作符"></a>WHERE子句操作符</h3><p>语法：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>,列名<span class="number">2</span>,<span class="params">...</span> </span><br><span class="line">FROM 表名</span><br><span class="line"><span class="keyword">WHERE</span> 条件</span><br></pre></td></tr></table></figure><p>MYSQL支持以下所有条件操作符：</p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>BETWEEN</td><td>在指定的两个值之间</td></tr><tr><td>IS NULL</td><td>为NULL值</td></tr></tbody></table><h3 id="过滤单个值"><a href="#过滤单个值" class="headerlink" title="过滤单个值"></a>过滤单个值</h3><p>过滤prod_name=’fuses’的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name,prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name=<span class="string">'fuses'</span>;</span><br></pre></td></tr></table></figure><p>过滤价格小于10元的数据 </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name,prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price&lt;<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>过滤价格小于等于10元的数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name,prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price&lt;=<span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="过滤不匹配"><a href="#过滤不匹配" class="headerlink" title="过滤不匹配"></a>过滤不匹配</h3><p>过滤vend_id不是1002的数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name,prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id != <span class="number">1002</span>;</span><br></pre></td></tr></table></figure><blockquote><p>如果条件值为字符串类型，则需要引用引号，如果条件值为数值类型，则不需要引用引号</p></blockquote><h3 id="过滤范围值-BETWEEN"><a href="#过滤范围值-BETWEEN" class="headerlink" title="过滤范围值(BETWEEN)"></a>过滤范围值(BETWEEN)</h3><p>如果需要检查某个范围的值，可以使用<strong><code>BETWEEN</code></strong>操作符。其语法与其他WHERE子句的操作符不同。BETWEEN需要两个值，过滤范围的开始值和结束值。在范围使用BETWEEN时，必须指定两个值——所需范围的低端值和高端值。这两个值必须用<strong><code>AND</code></strong>关键字分隔。BETWEEN匹配范围中的所有值，包括指定的开始值和结束值。</p><p>过滤价格在5元和10元之间的所有产品</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name,prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="空值过滤-IS-NULL"><a href="#空值过滤-IS-NULL" class="headerlink" title="空值过滤(IS NULL)"></a>空值过滤(IS NULL)</h3><p>WHERE子句 <strong><code>IS NULL</code></strong>用来检查具有<strong>NULL</strong>值的列。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><p>《MySQL必知必会》人民邮电出版社</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章主要以MySQL数据库进行讲解&lt;/p&gt;
&lt;p&gt;在阅读本文之前假设已经安装MySQL数据库。请先构建好数据源，如果没有安装MYSQL数据库可以通过下面的在线网站构建数据源并练习SQL语句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SQL在线练习网站：&lt;a href=&quot;http:/
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="sql" scheme="http://yoursite.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP协议</title>
    <link href="http://yoursite.com/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TTCP-IP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TTCP-IP%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-03-12T18:19:13.000Z</published>
    <updated>2020-03-15T14:02:04.814Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TCP-IP的标准制定"><a href="#TCP-IP的标准制定" class="headerlink" title="TCP/IP的标准制定"></a>TCP/IP的标准制定</h3><p>由于TCP/IP技术的公开性，他不属于任何一个厂商或者是专业协会所有。TCP/IP的标准大部分都由<strong>RFC</strong>技术报告的形式公开。RCF文件包含了所有TCP/IP的协定标准，以及其最新版本。RFC所涵盖的内容和细节非常广，也可以为新协定的标准和计划，但不能以学术研究论文的方式来编辑。</p><h3 id="TCP-IP的特性"><a href="#TCP-IP的特性" class="headerlink" title="TCP/IP的特性"></a>TCP/IP的特性</h3><ul><li>它是其它网络服务的基础，几乎所有数据包交换网络都提供了这种服务。TCP/IP是根据信息中所含的地址资料来进行资料的传送，他不能确保每个独立路由的数据包是可靠和依序的送达目的地。在每个连线过程中，线路都不是被”独占”的，而是直接映射到硬件地址上，因此特别有效。</li><li>因为数据包交换并不能确保每一个数据包的可靠性，因此我们就需要通讯软件来自动检测和修护传送过程中出现的错误和处理损坏数据包。这种服务就是用来确保电脑程序之间能够连接和传送大量的数据。关键的技术就是数据流进行分割，然后编号传送，然后通过接受的确认来确数据的完整性</li><li>在数据包交换技术中，TCP/IP是独立于硬件之上的。TCP/IP有自己的一套数据包规定和定义,能应用在不同的网络之上</li><li>只要用TCP/IP连接网络，就会获得一个独一无二的识别位址。数据包在交换过程中，是以位址数据为依据，不管数据包所经历的路由如何，数据都会被送到指定的地址。</li><li>TCP/IP 的确认模式是以“端到端”进行的。這样就无需理会数据包交换过程中所参与的其他设备。</li></ul><h3 id="TCP-IP协议分层框架"><a href="#TCP-IP协议分层框架" class="headerlink" title="TCP/IP协议分层框架"></a>TCP/IP协议分层框架</h3><ul><li><p>链路程：链路层以字节位单位0和1分别进行分组，定义数据帧，写入源和目标机器的物理地址，数据，校验位来传输数据。</p><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/linkway.png" alt=""></p><p>链路层报文结构</p></li><li><p>网络层：根据IP定义网络地址，区分网段。子网内根据地址解析协议(ARP)进行MAC寻址，子网外进行路由转发数据包，这个数据包即为IP数据包。</p></li><li><p>传输层：数据包通过网络层发送到目标计算机后，应用程序在传输层定义逻辑端口，确认身份后，将数据包交给应用程序，实现端口到端口间通讯。</p></li><li><p>应用层：传输层的数据到达应用程序时，以某种统一规定的协议格式解读数据。</p></li></ul><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/PTCIP.png" alt=""></p><h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><p>IP是面向无连接、无状态的，没有额外的机制保证发送的包是否有序到达。IP首先规定出IP地址格式，该地址相当于在逻辑意义上进行了网段的划分，给没台机器额外设置了一个唯一的详细地址。IP地址属于网络层，主要的功能字啊WLAN内进行路由寻址，选择最佳路由。</p><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/IP.png" alt=""></p><h3 id="TCP建立连接"><a href="#TCP建立连接" class="headerlink" title="TCP建立连接"></a>TCP建立连接</h3><p>传输控制协议(TCP)，是一种面向连接、确保数据在端到端间的可靠传输的协议。面向连接是指在发送数据前，需要先建立一条虚拟的链路，然后让数据在这条链路上“流动”传输。每个TCP数据包是封装在IP包中的，每一个IP头的后面紧接的是TCP头。</p><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/TCP.png" alt=""></p><p>协议第一行的两个端口号各个占据两个字节，分别代表源机器与目标机器的端口号。这两个端口号与IP报头格式中的源IP地址和目标IP地址所组成的四元组可唯一标识一条TCP连接。由于TCP是面向连接的，所以有服务器和客户端之分。需要服务端先在相应的端口上进行监听，准备好接收客户端发起的连接请求。在类UNIX系统系统上通过netstat命令列出机器上已建立的连接信息，其中包含唯一标识一条连接的四元组，以及各连接的状态等内容。</p><p>TCP的FLAG位有6个bit组成，分别代表SYN、ACK、FIN、URG、PSH、RST，需要重点关注的是SYN、ACK、FIN。SYN(Synchronize Sequence Numbers)用作建立连接时的同步信号；ACK(Acknowledgement)用于对收到的数据进行确认，所确认的数据由确认序列号表示；FIN(Finish)表示后面没有数据需要发送，通常意味着所建立的连接需要关闭。</p><h4 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h4><p>TCP三次握手是指在建立连接的三个步骤：</p><ul><li><p>A机器发出一个数据包并将SYN置1，表示希望建立连接。这个包中的序列号假设是x。</p></li><li><p>B机器收到A机器发过来的数据包后，通过SYN得知这是一个建立连接的请求，于是发送一个响应包并将SYN和ACK标记都置为1。假设这个包中的序列号是y，而确认序列号的必须是x+1，表示收到了A发过来的SYN。在TCP中，SYN被当作数据中的一个字节。</p></li><li><p>A接收到B的响应后需进行确认，确认包中将ACK置1，并将确认序列号设置为y+1，表示收到了来自B的SYN。</p><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/SANCIWUOSHOU.png" alt=""></p><p>双方只有确认4类信息，才能建立连接。在第二次握手后，从B机器视角看还有连个NO信息无法确认。在第三次握手后，B机器才能确认自己的发报能力是否正常的。</p><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/TCP3.png" alt=""></p></li></ul><p>连接三次握手也是防止出现请求超时导致脏连接。TTL网络报文的生存时间往往都会超过TCP请求时间，如果两次握手就可以创建连接的话，传输数据并释放连接后，第一个超时的连接请求才到达B机器的话，B机器会认为是A创建的连接的请求，然后确认同意创建连接。因为A机器的状态不是SYN_SENT,所以直接丢弃了B的确认数据，以致最后只是B机器单方面创建连接完毕。</p><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/%E8%84%8F%E8%BF%9E%E6%8E%A5.png" alt=""></p><h3 id="TCP断开连接"><a href="#TCP断开连接" class="headerlink" title="TCP断开连接"></a>TCP断开连接</h3><p>TCP是全双工通信，双方都能作为数据的发送方和接收方，但TCP连接也会有断开的时候。A、B机器连接只要三次握手，而断开则需要四次挥手，例如下图：</p><p>A机器想要断开连接，则待本方数据发送完毕后，传递FIN信号给B机器。B机器应答ACK，告诉A机器可以断开，但是需要等B机器处理完成数据，再主动给A机器发送FIN信号。这时A机器处于半关闭状态(FIN-WAIT-2)，无法再发送新的数据。B机器做好连接关闭前的准备工作后，发送FIN给A机器，此时B机器也进入半关闭状态(CLOSE_WAIT)。A机器发送针对B机器FIN的ACK后，进入TIME_WAIT状态，经过2MSL后，没有收到B机器传过来的报文，则确定B机器已经收到A机器最后发送的ACK指令，此时TCP连接正式释放。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TCP-IP的标准制定&quot;&gt;&lt;a href=&quot;#TCP-IP的标准制定&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP的标准制定&quot;&gt;&lt;/a&gt;TCP/IP的标准制定&lt;/h3&gt;&lt;p&gt;由于TCP/IP技术的公开性，他不属于任何一个厂商或者是专业协会所有
      
    
    </summary>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>CPU与内存</title>
    <link href="http://yoursite.com/2020/03/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9E%84%E6%88%90/CPU%E4%B8%8E%E5%86%85%E5%AD%98/"/>
    <id>http://yoursite.com/2020/03/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9E%84%E6%88%90/CPU%E4%B8%8E%E5%86%85%E5%AD%98/</id>
    <published>2020-03-11T14:15:02.000Z</published>
    <updated>2020-03-12T19:34:04.876Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/CPU.png" alt=""></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yangshenghua97/Image/master/CPU.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>计算机的0与1</title>
    <link href="http://yoursite.com/2020/03/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9E%84%E6%88%90/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%840%E4%B8%8E1/"/>
    <id>http://yoursite.com/2020/03/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9E%84%E6%88%90/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%840%E4%B8%8E1/</id>
    <published>2020-03-11T12:53:21.000Z</published>
    <updated>2020-03-11T14:14:08.175Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机中无论是什么设备，归根结底都是0和1的信号处理，设定基数为2，进位的规则是“逢二进一”，称之为二进制，设想有8条电路，每条电路有高电平和低电平两种状态。根据组合排列，有2^8 即256个种不同的信号。这8条电路，最左侧的一条表示正负，0表示正数，1表示负数，不参与数值表示。</p><h3 id="基本编码"><a href="#基本编码" class="headerlink" title="基本编码"></a>基本编码</h3><p>表示数的基本编码方式有原码、反码、补码；</p><p><strong>原码：符号为和数字实际值得结合，正数就是数值本身，符号为0；负数是数值本身，符号位为1，8位的二进制的表示范围是[-127,127]</strong></p><p><strong>反码：正数是本身，符号位为0；负数的数值部分是正数表示的基础上对各个位取反，符号位为1。8位二进制数的表示范围是[-127,127]</strong></p><p><strong>补码：正数是数组的本身，符号位为0，负数的数值部分是在正数表示基础上对各个位取反加1，符号位为1。8位二进制数的表示范围是[-127,127]</strong></p><table><thead><tr><th>正数/负数</th><th>原码</th><th>反码</th><th>补码</th></tr></thead><tbody><tr><td>1</td><td>0000 0001</td><td>0000 0001</td><td>0000 0001</td></tr><tr><td>-1</td><td>1000 0001</td><td>1111 1110</td><td>1111 1111</td></tr><tr><td>2</td><td>0000 0010</td><td>0000 0010</td><td>0000 0010</td></tr><tr><td>-2</td><td>1000 0010</td><td>1111 1101</td><td>1111 1110</td></tr></tbody></table><p>为了加速计算机对加减乘除运算速度，所有产生了反码和补码。例如在进行减法计算时，1-2=-1在计算机运算中可以这样运算：1+（-2）=-1。如果使用原码计算则结果为：1+（-2）= [0000 0001]<del>原</del>+[1000 0010]<del>原</del> = [10000011]<del>原</del> = -3结果是错误的。为了解决这一问题，于是出现了反码，使用反码计算，结果为1-2 = 1+(-2) = [00000001]<del>反</del>+[1111 1101]<del>反</del>=[1111 1110]<del>反</del> = -1。</p><h3 id="计算机存储计量单位"><a href="#计算机存储计量单位" class="headerlink" title="计算机存储计量单位"></a>计算机存储计量单位</h3><p>在上述的一条线路在计算机中表示1位，<strong>即1个bit，8个bit组成一个单位，称为一个字节，即1个Byte，1024个Byte简写为KB，1024个KB简写为MB，1024个MB简写为GB</strong>。</p><h3 id="位移运算"><a href="#位移运算" class="headerlink" title="位移运算"></a>位移运算</h3><p>向右移动一位近似表示除以2，十进制转化为二进制数后，向右移时，最右边的1位将被直接抹去。在左移<strong><code>&lt;&lt;</code></strong>和右移<strong><code>&gt;&gt;</code></strong>这两种运算中符号位均参与移动，除了负数右移时高位补1外，其他情况均在空位处补0</p><p>左移运算由于符号位参与向左移动，在移动后的结果，最左位可能是1或是0，即正数向左移的结果可能负数也可能是正数，负数向左移的结果也是如此。</p><p>对于 <strong><code>&gt;&gt;&gt;</code></strong> 无符号向右移动(不存在&lt;&lt;&lt;位移运算)，当向右移动时，正负数高位均补0，正数不断向右移动的最小值是0，而负数不断向右移动的最小值为1，无需考虑符号位，高位直接补0</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>《码出高效 Java开发手册》</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在计算机中无论是什么设备，归根结底都是0和1的信号处理，设定基数为2，进位的规则是“逢二进一”，称之为二进制，设想有8条电路，每条电路有高电平和低电平两种状态。根据组合排列，有2^8 即256个种不同的信号。这8条电路，最左侧的一条表示正负，0表示正数，1表示负数，不参与数
      
    
    </summary>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>里氏替换原则</title>
    <link href="http://yoursite.com/2020/03/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/6%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99-%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2020/03/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/6%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99-%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/</id>
    <published>2020-03-08T07:04:15.000Z</published>
    <updated>2020-03-08T08:36:07.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是里氏替换原则"><a href="#什么是里氏替换原则" class="headerlink" title="什么是里氏替换原则"></a>什么是里氏替换原则</h2><p>在《大话设计模式》中：</p><blockquote><p><strong>里氏替换原则（LSP）：子类型必须能够替换掉他们的父类型</strong></p></blockquote><ul><li><strong>一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且他察觉不出父类对象和子类对象的区别，那就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化</strong></li></ul><p><strong>只有当子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为</strong></p><p>比方说，猫是继承动物类的，以动物的身份拥有吃喝跑叫等行为，如果需要扩展狗牛羊也拥有类似的行为，由于都是继承自动物类，所以除了更改实例化的地方，程序其他处无需改变</p><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/Lishitihuan.jpg" alt=""></p><p>伪代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">动物 animal = <span class="keyword">new</span> 猫();</span><br><span class="line">animal.吃();</span><br><span class="line">animal.喝();</span><br><span class="line">animal.跑();</span><br><span class="line">animal.叫();</span><br></pre></td></tr></table></figure><p><strong>由于子类型的可替换性才使得使用父类类型的模块在无需修改的情况下就可以扩展。</strong></p><p>在《设计模式之禅》中是这样描述的：</p><ul><li><p><strong>如果对每种类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换o2时，</strong></p><p><strong>程序P的行为没有发生变化，那么类型S是类型T的子类型。</strong></p></li><li><p><strong>所有引用基类的地方必须能透明地使用其子类的对象。</strong></p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是里氏替换原则&quot;&gt;&lt;a href=&quot;#什么是里氏替换原则&quot; class=&quot;headerlink&quot; title=&quot;什么是里氏替换原则&quot;&gt;&lt;/a&gt;什么是里氏替换原则&lt;/h2&gt;&lt;p&gt;在《大话设计模式》中：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;里氏
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式原则" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>6大设计原则-单一职责原则</title>
    <link href="http://yoursite.com/2020/03/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/6%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2020/03/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/6%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</id>
    <published>2020-03-07T12:37:04.000Z</published>
    <updated>2020-03-08T07:01:18.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a><strong>单一职责原则</strong></h1><ul><li><p>单一职责(SRP)的定义：</p><blockquote><p><strong>就一个类而言，应该仅有一个引起它变化的原因。</strong></p></blockquote></li></ul><p>在编程的时候，会不知不觉的给一个类添加各种各样的功能、算法等等，这就意味着这个类维护麻烦，复用不可能，高耦合性，缺乏灵活。</p><p><strong>如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受意想不到破坏。软件设计真正的要做的许多内容，就是发现职责就是并把那些职责相互分离。</strong></p><p><strong>其实要去判断是否应该分离出类来，并不难，如果能够想到多于一个的动机去改变一个类，那么这个类就具有多一个职责，那么就应该考虑类的职责分离</strong></p><ul><li><p>案例</p><p>许多项目，都会接触到用户，机构，角色管理这类模块，基本上都是使用<strong><code>RBAC</code></strong>模型(Role-Based Access Control)，其实要讲的例子如下面的类图</p><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/IUserInfo.jpg" alt=""></p><p>通过这个类图一眼就能看出接口设计得有问题。</p><p>下面我们拆分成两个接口。</p><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/UserInfo.jpg" alt=""></p><p>现在面对接口编程，所以产生这个UserInfo对象之后，当然可以把它当作IUserBO接口使用，也可以当作IUserBiz接口使用。要获得用户信息，就当是IUserBO的实现类；要是希望维护用户的信息，就把它当作IUserBiz的实现类就可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">IUserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line"><span class="comment">//给BO赋值可以认为它是一个单纯的BO</span></span><br><span class="line">IUserBO userBO = (IUserBO)userInfo();</span><br><span class="line">userBO.setPassWord(<span class="string">"abc"</span>);</span><br><span class="line"><span class="comment">//执行动作，可以认为是一个业务逻辑类</span></span><br><span class="line">IUserBiz userBiz = (IUserBiz)userInfo();</span><br><span class="line">userBiz.deleUser();</span><br><span class="line">·····</span><br></pre></td></tr></table></figure><h5 id="单一职责原则的好处"><a href="#单一职责原则的好处" class="headerlink" title="单一职责原则的好处"></a>单一职责原则的好处</h5><ul><li>类的复杂性降低，实现什么职责都有清晰明确的定义</li><li>可读性提高，复杂性降低，那就当然可读性提高</li><li>可维护性提高，可读性提高，那就当然更容易维护</li><li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性，维护性都有非常大帮助。</li></ul></li></ul><p>对于接口，我们在设计的时候一定要做到单一，但是对于实现类的需要多方面思考，硬套单一职责原则会引起类的剧增，给维护带来很多的麻烦，而且过分细分类的职责也会人为地增加系统的复杂性。</p><p>单一职责适用于接口、类、方法。一个方法尽可能做一件事，每个方法的职责非常清晰明确，开发简单，维护也方便。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h2><blockquote><p><strong>《设计模式之禅》作者：秦小波</strong>     机械工业出版社</p><p><strong>《大话设计模式》作者：程杰</strong>         清华大学出版社</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单一职责原则&quot;&gt;&lt;a href=&quot;#单一职责原则&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则&quot;&gt;&lt;/a&gt;&lt;strong&gt;单一职责原则&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单一职责(SRP)的定义：&lt;/p&gt;
&lt;blockquot
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式原则" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法概述</title>
    <link href="http://yoursite.com/2020/02/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2020/02/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/</id>
    <published>2020-02-20T04:54:01.000Z</published>
    <updated>2020-03-16T03:35:35.806Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Git快速入门</title>
    <link href="http://yoursite.com/2020/02/15/git/Git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2020/02/15/git/Git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2020-02-15T09:56:07.000Z</published>
    <updated>2020-03-14T15:34:11.421Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Git安装(Windowns系统为例)</p><ul><li><p>下载Git软件:</p><p>点击链接:<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/git1.png" alt=""></p><p>双击！</p><p>一路Next！</p></li></ul></li><li><h2 id="1-Git命令行"><a href="#1-Git命令行" class="headerlink" title="1 Git命令行"></a>1 Git命令行</h2><p>git简单易用，只要在终端输入$ <code>Git</code>，Git就会不带任何参数输出它的选项和常用的子命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git</span><br><span class="line"><span class="comment">#输入git后会输出一下选项，如果要得到一个完整的git子命令列表，可以输入 git help --all</span></span><br><span class="line">usage: git [--version] [--<span class="built_in">help</span>] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]</span><br><span class="line">           [--<span class="built_in">exec</span>-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class="line">           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]</span><br><span class="line">····················</span><br><span class="line">collaborate (see also: git <span class="built_in">help</span> workflows)</span><br><span class="line">   fetch      Download objects and refs from another repository</span><br><span class="line">   pull       Fetch from and integrate with another repository or a <span class="built_in">local</span> branch</span><br><span class="line">   push       Update remote refs along with associated objects .....</span><br></pre></td></tr></table></figure><ul><li><h2 id="2-Git使用快速入门"><a href="#2-Git使用快速入门" class="headerlink" title="2 Git使用快速入门"></a>2 Git使用快速入门</h2><ul><li><h4 id="2-1创建初始版本库"><a href="#2-1创建初始版本库" class="headerlink" title="2.1创建初始版本库"></a>2.1创建初始版本库</h4><p>首先在git终端下创建一个空文件夹:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建空文件夹 test/</span></span><br><span class="line">$ mkdir -p <span class="built_in">test</span>/</span><br><span class="line"><span class="comment">#进入到test文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span>/</span><br><span class="line"><span class="comment">#执行git init命令</span></span><br><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /root/<span class="built_in">test</span>/.git/</span><br></pre></td></tr></table></figure><p>Git不会关心文件夹里是否为空，执行<code>git init</code> 命令创建了一个隐藏目录，在项目目录的顶层有个名为 <code>.git</code>文件夹，Git把所有修订的信息都放在这唯一的顶层目录里</p></li><li><h4 id="2-2-将文件添加到版本库中"><a href="#2-2-将文件添加到版本库中" class="headerlink" title="2.2 将文件添加到版本库中"></a>2.2 将文件添加到版本库中</h4><p>执行 git init 命令时，Git版本库都是空的，为了管理内容，需要明确的把内容放入版本库中。</p><p>使用 <code>git add file</code>[^1] 将file添加到版本库中。</p><p>例如:</p><p>在 <code>test</code>目录中创建一个文件<code>index.html</code>并把该文件添加到版本库中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span>/</span><br><span class="line">$ touch index.html</span><br><span class="line">$ git add index.html</span><br></pre></td></tr></table></figure><p>[^1 ]: 如果目录中已经有很多的文件，使用<code>git add .</code>命令让Git把当前的目录及子目录中的文件都添加到版本库中</p><p>运行<code>git status</code> 命令显示中间状态的<code>index.html</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">  <span class="comment"># 这个命令显示新文件index.html将在下次提交时添加到版本库中</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="2-3-版本库内文件的删除和重命名"><a href="#2-3-版本库内文件的删除和重命名" class="headerlink" title="2.3 版本库内文件的删除和重命名"></a>2.3 版本库内文件的删除和重命名</h4><ul><li><h5 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h5><p>执行命令 <code>git rm</code>可以删除版本库里不需要的文件</p><p>操作如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">  #</span><span class="bash"> 查看版本库中的文件</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> git ls-files</span></span><br><span class="line">  index.html</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行git rm index.html即可删除版本库中的index.html文件</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> git rm index.html</span></span><br></pre></td></tr></table></figure></li><li><h5 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h5><p>  在终端执行<code>git mv srcfile targetfile</code>即可以完成文件的重命名</p><p>  例如：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先查看版本库中的文件</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> git ls-files</span></span><br><span class="line">index.html</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 执行git mv index.html foo.html 将index.html修改为foo.html</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git mv index.html foo.html</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 再次查看版本库文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git ls-files</span></span><br><span class="line">  foo.html</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Git安装(Windowns系统为例)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载Git软件:&lt;/p&gt;
&lt;p&gt;点击链接:&lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://g
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git提交</title>
    <link href="http://yoursite.com/2020/02/15/git/Git%E6%8F%90%E4%BA%A4/"/>
    <id>http://yoursite.com/2020/02/15/git/Git%E6%8F%90%E4%BA%A4/</id>
    <published>2020-02-15T08:54:50.000Z</published>
    <updated>2020-02-15T13:12:57.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="吧啦吧啦乱七八遭的东西"><a href="#吧啦吧啦乱七八遭的东西" class="headerlink" title="吧啦吧啦乱七八遭的东西"></a>吧啦吧啦乱七八遭的东西</h2><p>在Git中，提交（commit）是用来记录版本库的变更的。当提交时，Git记录索引的快照并把快照放进对象库（简单的介绍）。提交的快照是串联在一起的，每张新的快照指向它的先驱。随着时间的推移，一系列的变更就表示一系列的提交。</p><p>Git提供一种机制来确定相对于另一个引用的提交，通常是分支的头。</p><p>在某些Git应用场景中，可能见过诸如这样的提交形式 master^ 。</p><p>在同一代提交中，插入符号 ^ 是用来选择不同的父提交。给定一个提交C，C^1 是其第一个父提交，C^2 是其第二个父提交，等等，如图:</p><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/commit.jpg" alt=""></p><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/commit1.jpg" alt=""></p><p>通过把引用与^ 和 ~ 组合，就可从引用的提交历史图中选出任意提交</p><h2 id="提交历史记录"><a href="#提交历史记录" class="headerlink" title="提交历史记录"></a>提交历史记录</h2><ul><li><p><strong>查看旧提交</strong> </p><p>显示提交历史记录的主要命令是 <strong><code>git log</code></strong>,在参数形式上，<strong><code>git log</code></strong>跟<strong><code>git log HEAD</code></strong>是一样的，输出每一个可从HEAD找到的历史记录中的提交日志信息。变更从HEAD提交开始显示，并从提交图中回溯。如果使用<strong><code>git log</code></strong></p><p>时提供一个提交名，那么这个日志将从该提交开始回溯输出。例如:<strong><code>git log master</code></strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;吧啦吧啦乱七八遭的东西&quot;&gt;&lt;a href=&quot;#吧啦吧啦乱七八遭的东西&quot; class=&quot;headerlink&quot; title=&quot;吧啦吧啦乱七八遭的东西&quot;&gt;&lt;/a&gt;吧啦吧啦乱七八遭的东西&lt;/h2&gt;&lt;p&gt;在Git中，提交（commit）是用来记录版本库的变更的。当提交时，
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>关于Git文件管理</title>
    <link href="http://yoursite.com/2020/02/12/git/%E5%85%B3%E4%BA%8EGit%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2020/02/12/git/%E5%85%B3%E4%BA%8EGit%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</id>
    <published>2020-02-12T11:25:36.000Z</published>
    <updated>2020-03-14T15:36:34.237Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git中的文件分类"><a href="#git中的文件分类" class="headerlink" title="git中的文件分类"></a>git中的文件分类</h3><p>​    Git将所有文件分为3类：已追踪的、被忽略的以及未追踪的</p><ul><li><p>已追踪的</p><p>已追踪的文件是指已经在版本库中的文件，或者是已暂存到索引中的文件。如果想将新文件<strong><code>newfile</code></strong>添加到已追踪的文件，执行 <strong><code>git add newfile</code></strong>即可</p></li><li><p>被忽略的</p><p>被忽略的文件必须在版本库中明确声明为不可见或被忽略，即使他可能会在工作目录中出现。一个软件项目通常都会有很多被忽略的文件。普通被忽略的文件包括临时文件、个人笔记、编译器输出文件以及构建过程中自动生成的大多数文件。Git维护一个默认的忽略文件列表，也可以配置版本库来识别其他文件。被忽略的文件会在后面介绍。</p></li><li><p>未追踪的</p><p>未追踪的文件是指那些不在版本库中的文件。</p></li></ul><p>下面举一个栗子:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">nothing to commit (create/copy files and use "git add" to track)</span><br><span class="line"><span class="meta">#</span><span class="bash">添加一个文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"new Data"</span> &gt;&gt; data</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Untracked files:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       data</span></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br></pre></td></tr></table></figure><p>为了让Git忽略目录中的文件，只需将该文件名添加到一个特殊的文件<strong><code>.gitignore</code></strong>中就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch main.o</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Untracked files:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       data</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       main.o</span></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br><span class="line"><span class="meta">#</span><span class="bash">将 main.o添加到.gitignore中</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> main.o &gt;&gt; .gitignore</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Untracked files:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       .gitignore</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       data</span></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br></pre></td></tr></table></figure><p>这样main.o就已经被忽略了，但是<strong><code>git status</code></strong>现在显示一个新的未追踪的文件 .gitignore。</p><h2 id="使用-git-add"><a href="#使用-git-add" class="headerlink" title="使用 git add"></a>使用 git add</h2><p><strong><code>git add</code></strong> 命令将暂存一个文件。就Git文件分类而言，如果一个文件是未追踪的，那么<strong><code>git add</code></strong>就会将文件的状态转化为已追踪的。如果git add作用于一个目录名，那么该目录下的文件以及子目录都会递归暂存起来。</p><p>这里还接着上面的栗子:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Untracked files:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       .gitignore</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       data</span></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将data、.gitignore两个文件添加至已追踪的分类</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add data .gitignore</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Initial commit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Changes to be committed:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       new file:   .gitignore</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       new file:   data</span></span><br></pre></td></tr></table></figure><p>在上面的栗子中使用<strong><code>git add</code></strong>后，暂存和追踪data和.gitignore文件，并准备下次提交是时添加到版本库中。</p><p>可以使用<strong><code>git ls-files</code></strong>命令查看隐藏在对象模型下的东西。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git ls-files</span></span><br><span class="line">.gitignore</span><br><span class="line">data</span><br></pre></td></tr></table></figure><p>在任何编辑之后，提交变更之前，请执行一次<strong><code>git add</code></strong>命令。</p><h2 id="使用-git-commit"><a href="#使用-git-commit" class="headerlink" title="使用 git commit"></a>使用 git commit</h2><h3 id="使用-git-commit-–all"><a href="#使用-git-commit-–all" class="headerlink" title="使用 git commit –all"></a>使用 git commit –all</h3><p><strong><code>git commit</code></strong> 的 <strong><code>-a</code></strong>或者 <strong><code>--all</code></strong>选项会导致执行提交之前自动暂存所有未暂存的和未追踪的文件变化，包括从工作副本中删除已追踪的文件</p><p>下面举个栗子:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/tmp/commit-all-example</span><br><span class="line"><span class="meta">#</span><span class="bash">创建测试版本库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line">Initialized empty Git repository in /tmp/commit-all-example/.git/</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Testfile1"</span> &gt;&gt; ready</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Testfile2"</span> &gt;&gt; notyet</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add ready notyet</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"Setup"</span></span></span><br><span class="line">[master (root-commit) 2b00dbf] Setup</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 notyet</span><br><span class="line"> create mode 100644 ready</span><br></pre></td></tr></table></figure><p>之后再次编辑<strong>ready</strong>文件，并用 <strong><code>git add</code></strong>把它添加到版本库中。然后编辑<strong>notyet</strong>文件保持它是未暂存的。</p><p>在一个子目录下添加一个文件，但是不要对它执行<strong><code>git add</code></strong>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir subdir</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Nope"</span> &gt;&gt; subdir/new</span></span><br></pre></td></tr></table></figure><p>当执行 <strong><code>git commit --all</code></strong>命令，Git会递归遍历整个版本库，暂存所有先前通过<strong><code>git add</code></strong>提交的已知的和修改的文件，然后提交它们，由于<strong>subdir/</strong> 一个全新的目录，而且目录下没有任何文件名或路径通过<strong><code>git add</code></strong>和<strong><code>git commit</code></strong>进行操作的，</p><p>So 即使是 –all选项也不能将其提交。</p><h3 id="关于提交日志消息"><a href="#关于提交日志消息" class="headerlink" title="关于提交日志消息"></a>关于提交日志消息</h3><p>​    如果不通过命令行直接提供日志消息（例如:<strong><code>git commit -m &quot;提交日志消息&quot;</code></strong>），Git会启动编辑器，并提示你写一个提交日志。</p><h2 id="使用-git-rm-命令"><a href="#使用-git-rm-命令" class="headerlink" title="使用 git rm 命令"></a>使用 git rm 命令</h2><p>​       git rm命令会在版本库中和目录中同时删除文件。</p><p>接着上面的栗子:</p><p>这里“意外”的添加了一个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Random"</span> &gt; oops</span></span><br><span class="line"><span class="meta">#</span><span class="bash">当执行git rm oops时，提示删除失败</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm oops</span></span><br><span class="line">fatal: pathspec 'oops' did not match any files</span><br></pre></td></tr></table></figure><p>​    为什么会这样，可以通过<strong><code>git ls-files</code></strong>命令查看版本库中的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git ls-files</span></span><br><span class="line">notyet</span><br><span class="line">ready</span><br></pre></td></tr></table></figure><p>现在的版本库中没有<strong>oops</strong>这个文件，可通过<strong>git add oops</strong>命令将 oops文件加入到版本库中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add oops</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git ls-files</span></span><br><span class="line">notyet</span><br><span class="line">oops</span><br><span class="line">ready</span><br></pre></td></tr></table></figure><p>另外，要将一个文件由已暂存的转化为未暂存的,可以使用<strong><code>git rm --cached</code></strong>命令</p><p>比如要删除oops</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm --cached oops</span></span><br><span class="line">rm 'oops'</span><br></pre></td></tr></table></figure><p><strong><code>git rm --cached</code></strong>会删除索引中的文件并它文件保留在工作目录中，而<strong><code>git rm</code></strong>则会将文件从索引和工作目录中都删除。</p><p>如果想要删除一个已经提交的文件，通过简单的<strong><code>git rm filename</code></strong>命令来暂存这一请求</p><blockquote><p>还可以使用 <strong><code>git rm -f</code></strong>来强制删除文件。</p></blockquote><p>如果想保留的文件不小心删除了，可以通过版本控制系统的恢复功能进行恢复</p><p>具体的命令如下:</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 加入不小心删除了oops文件</span></span><br><span class="line"><span class="meta"># 可以是下面的命令进行恢复</span></span><br><span class="line">git checkout HEAD -- oops</span><br></pre></td></tr></table></figure><h2 id="使用-git-mv"><a href="#使用-git-mv" class="headerlink" title="使用 git mv"></a>使用 git mv</h2><p>如果想要给一个文件重命名可以使用<strong><code>git mv srcfile newfile</code></strong>，git mv 命令会将 <strong>srcfile</strong>文件的文件名称改为<strong>newfiles</strong>，Git会在索引中删除<strong>srcfile</strong>文件的路径名，并添加<strong>newfile</strong>的路径名，至于srcfile文件里的内容，Git仍然会保存在对象库中，然后才会将它与newfile重新关联。git mv 还可以移动一个文件到一个目录中：<strong><code>git mv srcfile dir/</code></strong></p><h2 id="gitignore-文件"><a href="#gitignore-文件" class="headerlink" title=".gitignore 文件"></a>.gitignore 文件</h2><p>在前面简单介绍过<strong>.gitignore</strong>文件的作用。可以通过<strong>.gitignore</strong>文件来忽略不相干的文件。Git还支持一种更丰富的机制，一个<strong>.gitignore</strong>文件下可以包含一个文件名模式列表，指定哪些文件需要忽略。<strong>.gitignore</strong> 文件的格式如下。</p><ul><li>空行会被忽略，而以（#）号开头的行可以用于注释。然而，如果#跟在其他文本后面，它就不代表注释了。</li><li>一个简单的字面置文件名匹配任何目录中的同名文件。</li><li>目录名由末尾的（/）标记。这能匹配同名的目录和子目录，但不匹配文件或符号链接。</li><li>包含shell通配符，如（*）号，这种模式可扩展为shell通配模式。正如标准shell通配符一样，因为不能跨目录匹配，所以一个 * 只能匹配一个文件或目录名。</li><li>起始的 ！号会对该行其余部分的模式进行取反。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;git中的文件分类&quot;&gt;&lt;a href=&quot;#git中的文件分类&quot; class=&quot;headerlink&quot; title=&quot;git中的文件分类&quot;&gt;&lt;/a&gt;git中的文件分类&lt;/h3&gt;&lt;p&gt;​    Git将所有文件分为3类：已追踪的、被忽略的以及未追踪的&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Linux账号管理与权限设置</title>
    <link href="http://yoursite.com/2019/03/21/Linux/Linux%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86%E4%B8%8E%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/03/21/Linux/Linux%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86%E4%B8%8E%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/</id>
    <published>2019-03-21T09:47:17.000Z</published>
    <updated>2020-03-21T09:52:13.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>文件与文件系统压缩</title>
    <link href="http://yoursite.com/2019/03/20/Linux/%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%8B%E7%BC%A9/"/>
    <id>http://yoursite.com/2019/03/20/Linux/%E6%96%87%E4%BB%B6%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8E%8B%E7%BC%A9/</id>
    <published>2019-03-20T06:42:11.000Z</published>
    <updated>2020-03-21T09:50:50.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux系统常见的压缩命令"><a href="#Linux系统常见的压缩命令" class="headerlink" title="Linux系统常见的压缩命令"></a>Linux系统常见的压缩命令</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*<span class="selector-class">.z</span> <span class="selector-tag">compress</span>程序压缩的文件；</span><br><span class="line">*<span class="selector-class">.zip</span> <span class="selector-tag">zip</span>程序压缩的文件；</span><br><span class="line">*<span class="selector-class">.gz</span> <span class="selector-tag">gzip</span>程序压缩的文件；</span><br><span class="line">*<span class="selector-class">.bz2</span> <span class="selector-tag">bzip2</span>程序压缩的文件；</span><br><span class="line">*<span class="selector-class">.xz</span> <span class="selector-tag">xz</span>程序压缩的文件；</span><br><span class="line">*<span class="selector-class">.tar</span> <span class="selector-tag">tar</span>程序打包的文件，并没有压缩过；</span><br><span class="line">*<span class="selector-class">.tar</span><span class="selector-class">.gz</span> <span class="selector-tag">tar</span>程序打包的文件，并经过<span class="selector-tag">gzip</span>的压缩</span><br><span class="line">*<span class="selector-class">.tar</span><span class="selector-class">.bz2</span> <span class="selector-tag">tar</span>程序打包的文件，并经过<span class="selector-tag">bzip2</span>的压缩</span><br><span class="line">*<span class="selector-class">.tar</span><span class="selector-class">.xz</span> <span class="selector-tag">tar</span>程序打包的文件，并经过<span class="selector-tag">xz</span>的压缩</span><br></pre></td></tr></table></figure><ul><li><p>gzip，zcat</p><p><strong><code>gzip</code></strong>可以说是应用最广泛的压缩命令。下面介绍这些命令;</p><ul><li><p><strong><code>gzip [-cdtv#] 文件名</code></strong></p><p>选项和参数：</p><p><strong><code>-c</code></strong>：将压缩的数据输出到屏幕上，可通过数据流重定向来处理；</p><p><strong><code>-d</code></strong>：解压缩的参数</p><p><strong><code>-t</code></strong>：可以用来检验一个压缩文件的一致性，看看文件是否有误</p><p><strong><code>-#</code></strong>：#表示压缩级别，-1最快，但压缩比最差，-9最慢，压缩比最好，默认为-6</p></li></ul></li><li><p>xz，xzcat</p><p>命令格式</p><p><strong><code>xz [-dtlkc#] 文件名</code></strong></p><p><strong><code>xcat 文件名.xz</code></strong></p><p>选项与参数:</p><p><strong><code>-d</code></strong>：解压缩；</p><p><strong><code>-t</code></strong>：测试压缩文件的完整性；</p><p><strong><code>-l</code></strong>：列出压缩文件的相关信息；</p><p><strong><code>-k</code></strong>：保留原本文件不删除</p><p><strong><code>-c</code></strong>：将数据在屏幕上输出</p><p><strong><code>-#</code></strong>：压缩级别</p></li></ul><h3 id="打包名命名：tar"><a href="#打包名命名：tar" class="headerlink" title="打包名命名：tar"></a>打包名命名：<strong><code>tar</code></strong></h3><p>命名格式：<br><strong><code>tat [-z][-j][-J][cv][-f 待建里的文件名] filename ...</code></strong>：打包与压缩<br><strong><code>tar [-z][-j][-J][tv][-f 既有的tar文件名]</code></strong>：查看文件名<br><strong><code>tar [-z][-j][-J][xv][-f 既有的tar文件名] [-C 目录]</code></strong>：解压缩<br>选项与参数：<br><strong><code>-c</code></strong>：建立打包文件，可搭配-v来查看过程中被打包的文件名；<br><strong><code>-t</code></strong>：查看打包文件的内容含有哪些文件名，重点看文件名；<br><strong><code>-x</code></strong>：解包或解压缩，可以搭配<strong><code>-C</code></strong>在特定目录解压；<br><strong><code>-z</code></strong>：通过gzip的支持进行压缩/解压缩：此时文件名最好为<strong>*.tar.gz</strong>；<br><strong><code>-C 目录</code></strong>：若要在特定目录解压缩，可以使用这个选项；<br><strong><code>-f finame</code></strong>：<strong>-f</strong>后面要立刻接要被处理的文件名<br><strong><code>--exclude=FILE</code></strong>：在压缩过程中，不要将FILE打包<br>注意：<strong><code>-c、-t、-x</code></strong>不可同时出现<br>常使用的命令组合：<br><strong><code>tar -zcvf filename.tar.gz</code></strong>、<strong><code>tar -jcvf filename.tar.bz2</code></strong>：压缩<br><strong><code>tar -ztvf filename.tar.gz</code></strong>、<strong><code>tar -jtvf filename.tar.bz2</code></strong>：查询<br><strong><code>tar -zxvf filename.tar.gz -C 目录</code></strong>、<strong><code>tar -jxvf filename.tar.bz2 -C 目录</code></strong>：解压缩</p><h3 id="常见的压缩与备份工具"><a href="#常见的压缩与备份工具" class="headerlink" title="常见的压缩与备份工具"></a>常见的压缩与备份工具</h3><h4 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h4><p>命令格式：<strong><code>dd if=input_file of=output_file bs=block_size count=number</code></strong></p><p>选项与参数：</p><p><strong><code>if</code></strong>：输如设备</p><p><strong><code>of</code></strong>：输出设备</p><p><strong><code>bs</code></strong>：设置的一个block的大小，若未指定则默认是512Bytes（一个扇区大小）</p><p><strong><code>count</code></strong>：多少个bs</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux系统常见的压缩命令&quot;&gt;&lt;a href=&quot;#Linux系统常见的压缩命令&quot; class=&quot;headerlink&quot; title=&quot;Linux系统常见的压缩命令&quot;&gt;&lt;/a&gt;Linux系统常见的压缩命令&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux的文件与目录管理</title>
    <link href="http://yoursite.com/2019/03/18/Linux/Linux%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2019/03/18/Linux/Linux%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/</id>
    <published>2019-03-18T13:40:17.000Z</published>
    <updated>2020-03-21T06:31:51.518Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录相关操作"><a href="#目录相关操作" class="headerlink" title="目录相关操作"></a>目录相关操作</h3><p>对于目录相关的命名首先要介绍的一个命令是目录切换命令：<strong><code>cd</code></strong></p><p>还有一些比较特殊的目录：</p><ul><li><strong><code>.</code></strong>：代表此层目录；</li><li><strong><code>..</code></strong>：代表上一层目录；</li><li><strong><code>-</code></strong>：代表前一个工作目录；</li><li><strong><code>~</code></strong>：代表目前使用者身份所在的家目录</li><li><strong><code>~account</code></strong>：代表<strong>account</strong>这个使用者的家目录</li></ul><h4 id="处理目录的命令："><a href="#处理目录的命令：" class="headerlink" title="处理目录的命令："></a>处理目录的命令：</h4><ul><li><p><strong><code>cd（change directory）</code></strong>：切换目录</p><p>命令格式：<strong><code>cd [相对路径或绝对路径]</code></strong></p><p><strong>利用相对路径的写法必须确认的目前的路径才能正确地去到想要的目录</strong></p><p>下面看几个例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#切换到tmp目录</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /tmp</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/tmp</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#回到家目录</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/root</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#回到上一次的工作目录</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> -</span></span><br><span class="line">/tmp</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#当前的工作目录在/tmp，回到上一级目录</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ..</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/</span><br></pre></td></tr></table></figure></li><li><p><strong><code>pwd（显示目前所在的目录）</code></strong></p><p>命令格式：<strong><code>pwd [-p]</code></strong></p><p>​                    选项与参数：-p：显示出真正的目录，而非使用链接路径</p></li><li><p><strong><code>mkdir</code></strong>：建立新目录</p><p>命令格式</p><p><strong><code>mkdir [-mp] 目录名称</code></strong></p><p>选项与参数：</p><p><strong><code>-m</code></strong>：设置文件的权限。直接设置，不需使用默认权限（<strong>umask</strong>）</p><p><strong><code>-p</code></strong>：递归创建子目录</p><p>下面举几个例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在当前的工作目录下创建test0目录</span></span><br><span class="line"><span class="string">$</span> <span class="string">mkdir</span> <span class="string">test0</span></span><br><span class="line"><span class="string">drwxr-xr-x</span> <span class="number">2</span> <span class="string">root</span> <span class="string">root</span> <span class="number">4096</span> <span class="string">Mar</span> <span class="number">19</span> <span class="number">16</span><span class="string">:58</span> <span class="string">test0</span></span><br><span class="line"><span class="comment">##在当前的工作目录下递归创建test1/test2/test3这样的多层目录</span></span><br><span class="line"><span class="string">$</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">test1/test2/test3</span></span><br></pre></td></tr></table></figure><p>一般创建目录大都是使用默认权限（umask），mkdir可以在创建目录时可以指定权限，例如：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -m <span class="number">711</span> test2</span><br><span class="line">drwx--x--x <span class="number">2</span> root root <span class="number">4096</span> Mar <span class="number">19</span> <span class="number">17</span>:<span class="number">07</span> test2</span><br></pre></td></tr></table></figure></li><li><p><strong><code>rmdir</code></strong>：删除“空”目录<br>命令格式：rmdir [-p] 目录名称<br>被删除的目录里不能存在其他的文件和目录，如果想要一次性删除一个目录以及该目录其下的子目录可以使用<strong><code>rm -rf 目录名称</code></strong>,但这样不是太安全，还是使用<strong><code>rmdir</code></strong>比较安全。</p></li></ul><h4 id="文件与目录管理"><a href="#文件与目录管理" class="headerlink" title="文件与目录管理"></a>文件与目录管理</h4><h5 id="文件与目录查看：ls"><a href="#文件与目录查看：ls" class="headerlink" title="文件与目录查看：ls"></a>文件与目录查看：<strong><code>ls</code></strong></h5><p>命名格式：<strong><code>ls [-adlh]</code></strong> 文件名或目录名称</p><p>选项参数：</p><p><strong><code>-a</code></strong>：全部的文件，包括隐藏文件（开头为.的文件）一起列出</p><p><strong><code>-d</code></strong>：仅列出目录本身，而不是列出目录内的文件数据</p><p><strong><code>-h</code></strong>：将文件大小以及人类易读的方式（GB，KB，MB）列出</p><p><strong><code>-l</code></strong>：详细信息显示，包括文件的属性与权限等数据</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">##列出root目录下的所有文件</span><br><span class="line">$ ls -al ~</span><br><span class="line">dr-xr-x---.  <span class="number">9</span> root root <span class="number">4096</span> Mar <span class="number">19</span> <span class="number">17</span>:<span class="number">07</span> .</span><br><span class="line">dr-xr-xr-x. <span class="number">18</span> root root <span class="number">4096</span> Mar <span class="number">14</span> <span class="number">16</span>:<span class="number">57</span> ..</span><br><span class="line">-rw-------   <span class="number">1</span> root root <span class="number">5185</span> Mar <span class="number">18</span> <span class="number">23</span>:<span class="number">42</span> .bash_history</span><br><span class="line">······</span><br><span class="line">drwxr-xr-x   <span class="number">2</span> root root <span class="number">4096</span> Mar <span class="number">19</span> <span class="number">16</span>:<span class="number">58</span> test0</span><br><span class="line">drwxr-xr-x   <span class="number">3</span> root root <span class="number">4096</span> Mar <span class="number">19</span> <span class="number">17</span>:<span class="number">00</span> test1</span><br><span class="line">drwx--x--x   <span class="number">2</span> root root <span class="number">4096</span> Mar <span class="number">19</span> <span class="number">17</span>:<span class="number">07</span> test2</span><br><span class="line">-rw-rw-rw-   <span class="number">1</span> root root    <span class="number">0</span> Mar <span class="number">18</span> <span class="number">01</span>:<span class="number">49</span> test.txt</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">##列出root目录下的所有文件,以人类易读的方式</span><br><span class="line">$ ls -alh ~</span><br><span class="line">dr-xr-x---.  <span class="number">9</span> root root <span class="number">4.0</span>K Mar <span class="number">19</span> <span class="number">17</span>:<span class="number">07</span> .</span><br><span class="line">dr-xr-xr-x. <span class="number">18</span> root root <span class="number">4.0</span>K Mar <span class="number">14</span> <span class="number">16</span>:<span class="number">57</span> ..</span><br><span class="line">-rw-------   <span class="number">1</span> root root <span class="number">5.1</span>K Mar <span class="number">18</span> <span class="number">23</span>:<span class="number">42</span> .bash_history</span><br><span class="line">······</span><br><span class="line">drwxr-xr-x   <span class="number">2</span> root root <span class="number">4.0</span>K Mar <span class="number">19</span> <span class="number">16</span>:<span class="number">58</span> test0</span><br><span class="line">drwxr-xr-x   <span class="number">3</span> root root <span class="number">4.0</span>K Mar <span class="number">19</span> <span class="number">17</span>:<span class="number">00</span> test1</span><br><span class="line">drwx--x--x   <span class="number">2</span> root root <span class="number">4.0</span>K Mar <span class="number">19</span> <span class="number">17</span>:<span class="number">07</span> test2</span><br><span class="line">-rw-rw-rw-   <span class="number">1</span> root root    <span class="number">0</span> Mar <span class="number">18</span> <span class="number">01</span>:<span class="number">49</span> test.txt</span><br></pre></td></tr></table></figure><h4 id="复制、删除、移动：cp、rm、mv"><a href="#复制、删除、移动：cp、rm、mv" class="headerlink" title="复制、删除、移动：cp、rm、mv"></a>复制、删除、移动：<strong><code>cp</code></strong>、<strong><code>rm</code></strong>、<strong><code>mv</code></strong></h4><ul><li><p><strong><code>cp</code></strong>:复制文件或目录</p><p>命令格式：<strong><code>cp [-ipr] 源文件（source） 目标文件（dest）</code></strong></p><p>选项与参数：</p><p><strong><code>-a</code></strong>：参考下面的<strong><code>-dr</code></strong>选项</p><p><strong><code>-d</code></strong>：若源文件为链接文件属性，则复制链接文件属性而非文件本身</p><p><strong><code>-i</code></strong>：若目标文件已经存在，在覆盖时会先询问操作的进行</p><p><strong><code>-p</code></strong>：连同文件的属性一起复制，不使用默认属性</p><p><strong><code>-r</code></strong>：递归复制，用于目录的复制操作</p><p>在默认的条件中，<strong><code>cp</code></strong>的源文件与目标文件的权限是不同的，目标文件的拥有者通常会是命令操作本身。</p></li><li><p><strong><code>rm</code></strong>（删除文件或目录）</p><p>命令格式：<strong><code>rm [-fir] 文件或目录</code></strong></p><p>选项与参数：</p><p><strong><code>-f</code></strong>：强制的意思</p><p><strong><code>-I</code></strong>：交互模式，在删除之前会询问使用是否操作</p><p><strong><code>-r</code></strong>：递归删除</p><p>通常这个命令在使用时要十分小心，在删除前要认真确定删除的文件或目录是否正确，避免误删除的情况</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#删除test1文件夹</span></span><br><span class="line"><span class="meta">#连同目录下的所有子目录一并强制删除</span></span><br><span class="line">$ rm -rf test1 </span><br><span class="line"><span class="meta">#删除文件也是如此</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>mv（移动文件与目录或重命名）</code></strong></p><p>命令格式：<strong><code>mv [-fiu] source dest</code></strong></p><p>选项与参数：</p><p><strong><code>-f</code></strong>：强制执行</p><p><strong><code>-i</code></strong>：若目标文件已经存在，会询问是否覆盖</p><p><strong><code>-u</code></strong>：若目标文件已存在，且<strong>source</strong>比较新，才会更新</p><p>这里举几个例子：</p><p>将<strong>test.txt</strong>文件移动到<strong>test0</strong>文件夹中</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mv <span class="keyword">test</span>.txt test0</span><br><span class="line">$ <span class="keyword">ls</span> test0</span><br><span class="line"><span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure><p>将<strong>test0</strong>文件夹重命名为<strong>test3</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>mv test0 test4</span><br><span class="line"><span class="variable">$ </span>ls .</span><br><span class="line">test3</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>修改文件时间或创建新文件：<strong><code>touch</code></strong></p><p>命令格式：<strong><code>touch [-acdmt] 文件名</code></strong></p><p>选项与参数：</p><p>​    <strong><code>-a</code></strong>：仅自定义access time；</p><p>​    <strong><code>-c</code></strong>：仅修改文件时间，若该文件不存在则不创建新文件；</p><p>​    <strong><code>-d</code></strong>：后面可以接想要自定义的日期而不用目前的日期；</p><p>​    <strong><code>-m</code></strong>：修改mtime</p><p>​    <strong><code>-t</code></strong>：后面可以接想要自定义的时间而不是使用目前的日期，格式为[YYYYMMDDhhmm]</p><p>touch命令最常用的情况是：</p><ul><li><strong>创建一个空文件</strong></li><li><strong>将某个文件日期自定义为目前</strong></li></ul><p>举几个例子：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#创建一个空文件</span><br><span class="line">$ touch test1</span><br><span class="line">-rw-r--r--  <span class="number">1</span> root root <span class="number">0</span> Mar <span class="number">21</span> <span class="number">12</span>:<span class="number">03</span> test1</span><br><span class="line">#修改日期为：<span class="number">2020</span>/<span class="number">02</span>/<span class="number">21</span> <span class="number">00</span>:<span class="number">00</span></span><br><span class="line">$ touch -t <span class="number">202002210000</span> test1</span><br><span class="line">-rw-r--r--  <span class="number">1</span> root root <span class="number">0</span> Feb <span class="number">21</span> <span class="number">00</span>:<span class="number">00</span> test1</span><br></pre></td></tr></table></figure><h3 id="文件与目录的默认权限与隐藏权限"><a href="#文件与目录的默认权限与隐藏权限" class="headerlink" title="文件与目录的默认权限与隐藏权限"></a>文件与目录的默认权限与隐藏权限</h3><h4 id="文件默认权限：umask"><a href="#文件默认权限：umask" class="headerlink" title="文件默认权限：umask"></a>文件默认权限：<strong><code>umask</code></strong></h4><p>umask是指定目前用户在创建文件或者目录时的权限默认值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用<span class="built_in">umask</span>查看默认权限</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">umask</span></span></span><br><span class="line">0022 //与一般权限有关的是后面三个数字</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">umask</span> -S</span></span><br><span class="line">u=rwx,g=rx,o=rx</span><br></pre></td></tr></table></figure><p>默认情况下：</p><ul><li><p>若用户创建文件则默认没有（x）执行权限，也就是只有<strong><code>rw</code></strong>这两个项目,也就是最大为666，默认权限为：</p><p> <strong><code>-rw-rw-rw-</code></strong></p></li><li><p>若用户创建目录则由于x是与是否可以进入目录有关的，因此默认为所有权限均开放，即777</p><p><strong><code>drwxrwxrwx</code></strong></p></li></ul></li></ul><p><strong>umaks的数字指的是该默认值需要减掉的权限</strong></p><p>通过上面<strong><code>umask=0022</code></strong>进行说明。因为umask=0022，user没有被拿掉任何权限，group与others的权限被拿掉了2（也就是<strong>w</strong>权限）（r、w、x每个权限的数字在《Linux文件权限与目录简介》一篇中介绍过）那么用户：</p><ul><li><strong>创建文件时：（-rw-rw-rw-）-（- - - - - w - - w -）==&gt; - rw-r- -r- - ,最后创建文件时的权限：666-022=644</strong></li><li><strong>创建目录时：（drwxrwxrwx）-（d - - - - w- - w-）==&gt; drwxr-xr-x最后创建目录时的权限：777-022=755</strong></li></ul><p>创建一个文件和一个目录：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ umask</span><br><span class="line"><span class="number">0022</span></span><br><span class="line">$ touch test0</span><br><span class="line"><span class="number">666</span><span class="number">-022</span>=<span class="number">644</span></span><br><span class="line">-rw-r--r--  <span class="number">1</span> root root <span class="number">0</span> Mar <span class="number">21</span> <span class="number">12</span>:<span class="number">49</span> test0</span><br><span class="line"> <span class="number">6</span>  <span class="number">4</span>  <span class="number">4</span></span><br><span class="line">#创建目录</span><br><span class="line">$ mkdir test.d</span><br><span class="line"><span class="number">777</span><span class="number">-022</span>=<span class="number">755</span></span><br><span class="line">drwxr-xr-x  <span class="number">2</span> root roo <span class="number">4096</span> Mar <span class="number">21</span> <span class="number">12</span>:<span class="number">53</span> test.d</span><br><span class="line">  <span class="number">7</span>  <span class="number">5</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="文件隐藏属性"><a href="#文件隐藏属性" class="headerlink" title="文件隐藏属性"></a>文件隐藏属性</h4><ul><li><p>配置文件隐藏属性：<strong><code>chattr [+-=][ASacdistu] 文件或目录名称</code></strong></p><p>常用选项与参数：<br><strong><code>+</code></strong>：增加某个特殊参数，其他原本存在参数不动；<br><strong><code>-</code></strong>：减少某个特殊参数，其他原本存在参数不动；<br><strong><code>=</code></strong>：直接设置参数，且仅有后面接的参数；<br><strong><code>a</code></strong>：当设置这个<strong>a</strong>之后，这个文件将只能增加数据，而不能删除也不能修改数据，只有root才能设置这个属性；<br><strong><code>i</code></strong>：当设置<strong>i</strong>之后，可以让一个文件不能被删除、改名、设置链接也无法写入或新增数据；</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>touch test23</span><br><span class="line"><span class="variable">$ </span>chattr +i test23</span><br><span class="line"><span class="variable">$ </span>rm -rf test23</span><br><span class="line"><span class="comment">#不能删除</span></span><br><span class="line"><span class="symbol">rm:</span> cannot remove test23：Operation <span class="keyword">not</span> permitted</span><br></pre></td></tr></table></figure></li><li><p>显示文件隐藏属性：<strong><code>lsattr [-adR] 文件或目录</code></strong></p><p>选项与参数：</p><p><strong><code>-a</code></strong>：将隐藏文件的属性显示出来</p><p><strong><code>-d</code></strong>：如果接的目录，仅列出目录本身的属性而非目录内的文件名</p><p><strong><code>-R</code></strong>：连同子目录的数据也一并列出来</p><p>接着上面的例子：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">lsattr</span> <span class="literal">-</span><span class="comment">aR</span> <span class="comment">test23</span></span><br><span class="line"><span class="comment"></span>--<span class="literal">-</span><span class="literal">-</span><span class="comment">i</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">e</span>-- <span class="comment">test23</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="命令与文件的查找"><a href="#命令与文件的查找" class="headerlink" title="命令与文件的查找"></a>命令与文件的查找</h4><h5 id="脚本文件查找"><a href="#脚本文件查找" class="headerlink" title="脚本文件查找"></a>脚本文件查找</h5><ul><li><p>查找执行文件：<strong><code>which [-a] command</code></strong></p><p>选项或参数：</p><p><strong><code>-a</code></strong>：将所有由PATH目录中可以找到的命令均列出，而不止第一个被找到的命令名称</p><p>这个命令是根据【PATH】这个环境变量所规范的路径，去查找执行文件的文件名。</p></li></ul><h5 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h5><ul><li><p>由一些特定的目录中查找文件：<strong><code>whereis [-bmsu] 文件或目录</code></strong></p><p>选项与参数：</p><p><strong><code>-l</code></strong>：可以列出whereis会去查询的几个主要目录；</p><p><strong><code>-b</code></strong>：只找binary（二进制）格式文件；</p><p><strong><code>-m</code></strong>：只找在说明文件manual路径下的文件；</p><p><strong><code>-s</code></strong>：只找source源文件；</p><p><strong><code>-u</code></strong>：查找不在上述三个项目当中的其他特殊文件；</p></li><li><p><strong><code>locate [-ir] keyword</code></strong></p><p>选项与参数：</p><p><strong><code>-i</code></strong>：忽略大小写的差异；</p><p><strong><code>-c</code></strong>：不输出文件名，计算找到的文件数量；</p><p><strong><code>-l</code></strong>：仅输出几行的意思；</p><p><strong><code>-S</code></strong>：输出locate所使用的数据库文件的相关信息，包括该数据库记录文件/目录数量等；</p><p><strong><code>-r</code></strong>：后面可接正则表达式的显示方式；</p></li><li><p><strong><code>find [PATH] [option] [action]</code></strong>没事别用这个命令神慢~</p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>《鸟哥的Linux私房菜—基础学习篇（第四版）》 鸟哥著 人民邮电出版社</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;目录相关操作&quot;&gt;&lt;a href=&quot;#目录相关操作&quot; class=&quot;headerlink&quot; title=&quot;目录相关操作&quot;&gt;&lt;/a&gt;目录相关操作&lt;/h3&gt;&lt;p&gt;对于目录相关的命名首先要介绍的一个命令是目录切换命令：&lt;strong&gt;&lt;code&gt;cd&lt;/code&gt;&lt;/st
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件权限与目录简介</title>
    <link href="http://yoursite.com/2019/03/16/Linux/Linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2019/03/16/Linux/Linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%80%E4%BB%8B/</id>
    <published>2019-03-16T09:52:07.000Z</published>
    <updated>2020-03-21T03:49:47.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux文件权限与文件属性"><a href="#Linux文件权限与文件属性" class="headerlink" title="Linux文件权限与文件属性"></a>Linux文件权限与文件属性</h3><h4 id="Linux文件属性"><a href="#Linux文件属性" class="headerlink" title="Linux文件属性"></a>Linux文件属性</h4><p>先来看下面的Linux文件属性信息:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">29</span> Nov <span class="number">18</span> <span class="number">00</span>:<span class="number">00</span> test.txt</span><br><span class="line">drwxr-xr-x. <span class="number">4</span> root root <span class="number">39</span> Oct  <span class="number">8</span> <span class="number">14</span>:<span class="number">39</span> opt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/fileinfo.png" alt=""></p><ul><li><p>第一栏代表这个文件的类型与权限</p><ul><li><p>第一个字符代表这个文件是目录、文件或是链接文件等</p><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90.png" alt=""></p><ul><li>当为[d]则为目录，例如像上面的文件名【opt】就是一个目录</li><li>当为[-]则是文件，例如像上面的文件名【test.txt】就是一个文件</li><li>当为[l]则是链接文件</li><li>当为[b]则是设备文件里面的可供存储的周边设备</li></ul></li><li><p>当为[c]则是设备文件里面的串行端口设备</p></li></ul></li></ul><p>上面图片中后面的三个组表示<strong>文件拥有者</strong>、<strong>文件所属用户组</strong>、<strong>其他人</strong>的文件权限</p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">r</span> <span class="string">可读</span></span><br><span class="line"><span class="attr">w</span> <span class="string">可写</span></span><br><span class="line"><span class="attr">x</span> <span class="string">可执行</span></span><br><span class="line"><span class="meta">-</span> <span class="string">无权限</span></span><br></pre></td></tr></table></figure><ul><li><strong>第一组为文件拥有者可具备的权限。</strong></li><li><strong>第二组为加入此用户组的账号的权限</strong></li><li><strong>第三组为非本人且没有加入本用户组的其他账号的权限</strong></li></ul><ul><li><p>第二栏表示多少文件名链接到此节点</p></li><li><p>第三栏表示这个文件或目录的拥有者账号</p></li><li><p>第四栏表示这个文件的所属用户组</p></li><li><p>第五栏为这个文件的容量大小，默认单位为Bytes，如果想看更人性化的可以输入<strong><code>ls -alh</code></strong></p></li><li><p>第六栏为这个文件创建日期或是最近修该日期</p></li><li><p>第七栏为文件名，如果文件名之前多一个<strong><code>.</code></strong>,则代表这个文件为隐藏文件。</p></li></ul><h4 id="如何修改文件属性与权限"><a href="#如何修改文件属性与权限" class="headerlink" title="如何修改文件属性与权限"></a>如何修改文件属性与权限</h4><ul><li><p>几个修改用户组、拥有者、各种身份的权限命令</p><ul><li><strong><code>chgrp</code></strong>：修改文件所属用户组</li><li><strong><code>chown</code></strong>：修改文件拥有者</li><li><strong><code>chmod</code></strong>：修改文件的权限，SUID、SGID、SBIT等的特性</li></ul></li><li><h5 id="修改所属用户组：chgrp"><a href="#修改所属用户组：chgrp" class="headerlink" title="修改所属用户组：chgrp"></a>修改所属用户组：<strong><code>chgrp</code></strong></h5><p>修改一个文件的用户组直接使用<strong><code>chgrp</code></strong>命令修改即可，这个命令就是change group的缩写</p><p>命令格式：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chgrp [-<span class="symbol">R</span>] [系统用户] dirname/filename ...</span><br><span class="line">  -<span class="symbol">R</span>：进行递归修改，</span><br></pre></td></tr></table></figure><p>现在系统中有<strong>yang</strong>这个用户，将<strong>test.txt</strong>文件的用户组修改为<strong>yang</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ -rw-r--r--. <span class="number">1</span> root root <span class="number">29</span> Nov <span class="number">18</span> <span class="number">00</span>:<span class="number">00</span> test.txt</span><br><span class="line">$ chgrp yang test.txt</span><br><span class="line">$ ls -al</span><br><span class="line">#已经将test.txt文件的所属用户组修改为yang</span><br><span class="line">$ -rw-r--r--. <span class="number">1</span> root yang <span class="number">29</span> Nov <span class="number">18</span> <span class="number">00</span>:<span class="number">00</span> test.txt</span><br></pre></td></tr></table></figure></li><li><h5 id="修改文件拥有者：chown"><a href="#修改文件拥有者：chown" class="headerlink" title="修改文件拥有者：chown"></a>修改文件拥有者：<strong><code>chown</code></strong></h5><p>要修改文件为指定的用户，系统里必须有这个指定用户账号</p><p>命名格式：</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown [-<span class="keyword">R</span>] 账号名称 文件或目录</span><br><span class="line">chown [-<span class="keyword">R</span>] 账号名称:用户组名称 文件或目录</span><br><span class="line">-<span class="keyword">R</span>：进行递归修改，如果要连目录下的所有子目录或文件同时更改文件拥有者的话，加上-<span class="keyword">R</span>选项即可</span><br></pre></td></tr></table></figure><p>还是上面的那个<strong>test.txt</strong>文件，将其的文件拥有者修改为<strong>yang</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ -rw-r--r--.  <span class="number">1</span> root yang <span class="number">29</span> Nov <span class="number">18</span> <span class="number">00</span>:<span class="number">00</span> test.txt</span><br><span class="line">$ chown yang test.txt</span><br><span class="line">$ ls -al</span><br><span class="line">$ -rw-r--r--.  <span class="number">1</span> yang yang <span class="number">29</span> Nov <span class="number">18</span> <span class="number">00</span>:<span class="number">00</span> test.txt</span><br><span class="line">#将test.txt的拥有者和用户组修改回root</span><br><span class="line">$ chown root:root test.txt</span><br><span class="line">$ -rw-r--r--. <span class="number">1</span> root root <span class="number">29</span> Nov <span class="number">18</span> <span class="number">00</span>:<span class="number">00</span> test.txt</span><br></pre></td></tr></table></figure><p>chown也可以使用【chown user.group file】,在拥有者与用户组间加上【<strong>.</strong>】也可以修改。</p></li><li><h5 id="目录与文件权限的意义"><a href="#目录与文件权限的意义" class="headerlink" title="目录与文件权限的意义"></a>目录与文件权限的意义</h5><ul><li><h6 id="权限对文件的重要性"><a href="#权限对文件的重要性" class="headerlink" title="权限对文件的重要性"></a>权限对文件的重要性</h6><p>权限对于文件来说，意义是这样的：</p><ul><li><p><strong><code>r（read）</code></strong>：可读取此文件的实际内容</p></li><li><p><strong><code>w（write）</code></strong>：可以编辑、新增或是修改该文件的内容（但不可以删除该文件哦）</p></li><li><p><strong><code>x（eXecute）</code></strong>：该文件具有可以被系统执行的权限</p><p>在Linux下面，文件是否有执行能力，是根据是否具有【x】这个权限来决定的，和文件名没有绝对的关系</p></li></ul></li><li><h6 id="权限对目录的重要性"><a href="#权限对目录的重要性" class="headerlink" title="权限对目录的重要性"></a>权限对目录的重要性</h6><p>目录的主要内容在记录文件名列表，文件名与目录有强烈的关联。对于目录，r、w、x的意义如下：</p><ul><li><p><strong><code>r</code></strong>：表示具有读取目录结构列表的权限，所有当具有读取一个目录的权限（r）时，表示可以查询该目录下的文件名的数据。</p></li><li><p><strong><code>w</code></strong>：这个是对于目录的可写入权限，表示用户具有改动改目录结构列表的权限。也就是下面这些权限：</p><ul><li>建立新的文件与目录</li><li>删除已经存在的文件与目录</li><li>将已存在的文件或目录进行更名</li><li>移动该目录内的文件、目录位置</li></ul></li><li><p><strong><code>x</code></strong>：</p><p>目录的x表示的是当前用户能否进入该目录成工作目录。就是说可以通过<strong><code>cd</code></strong>命令切换到改目录下。如果当前用户在某目录下不具有<strong>x</strong>的权限，那么就无法切换到改目录下，也就无法在改目录下进行任何操作，即使有该目录的<strong><code>r</code></strong>和<strong><code>w</code></strong>权限也不好使。</p></li></ul><p>注意：要开放目录给任何人浏览时，应该至少也要给予<strong><code>r</code></strong>及<strong><code>x</code></strong>权限</p></li></ul></li><li><h5 id="修改文件权限：chmod"><a href="#修改文件权限：chmod" class="headerlink" title="修改文件权限：chmod"></a>修改文件权限：<strong><code>chmod</code></strong></h5><p>命名格式语法：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod [-R] <span class="built_in">xyz</span> 文件或目录</span><br><span class="line">  <span class="built_in">xyz</span>：数字类型的权限属性,为rwx属性值相加的值</span><br><span class="line">  -R：进行递归</span><br></pre></td></tr></table></figure><p>文件权限修改有两种方式：使用数字或者符号来进行权限修改。</p><ul><li><p>数字类型修改文件权限</p><p>Linux文件的基本权限有九个，分别是拥有者(owner)，所属群组（group）、其他人（others）三种身份各有自己的读（r）、写（w）、执行（x）权限。</p><p>拿上面介绍的文件权限那样，文件权限字符为：【-<strong>rwx</strong> <strong>rwx</strong> <strong>rwx</strong>】九个权限三个一组。</p><p>可以使用数字来代表各个组的权限：</p><p><strong><code>r</code></strong>：4</p><p><strong><code>w</code></strong>：2</p><p><strong><code>x</code></strong>：1</p><p>三种身份（拥有者(owner)、所属群组(group)、其他人（others））各自的三个权限（r，w，x）数字是需要累加的。例如前面提到的<strong>test.txt</strong>文件如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">29</span> Nov <span class="number">18</span> <span class="number">00</span>:<span class="number">00</span> test.txt</span><br></pre></td></tr></table></figure><p>权限为：【-rw-r–r–】的数字则是：<strong>644</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">owner = rw = 4+2 = 6</span><br><span class="line">group = r = 4</span><br><span class="line">others = r = 4</span><br></pre></td></tr></table></figure><p>接下来用<strong><code>chmod</code></strong>命令将该文件的是三种身份的权限数字设置为770<br><strong>owner = rwx = 4+2+1 = 7</strong><br><strong>group = rwx = 4+2+1 = 7;</strong><br><strong>others = - - - = 0</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ chmod <span class="number">770</span> test.txt</span><br><span class="line">$ ls -al test.txt</span><br><span class="line">-rwxrwx--- <span class="number">1</span> root root <span class="number">29</span> Nov <span class="number">18</span> <span class="number">00</span>:<span class="number">00</span> test.txt</span><br></pre></td></tr></table></figure><p>如果要将文件变成可执行的文件，并且不要让<strong>其他人</strong>修改文件的话，那就需要<strong><code>-rwxr-xr-x</code></strong>这样的权限，此时就要执行 <strong><code>chmod 755 fileName</code></strong>命令。</p></li><li><p>符号类型修改文件权限</p><p>符号类型修改文件权限可以借由(user)<strong><code>u</code></strong>，(group)<strong><code>g</code></strong>，(others)<strong><code>o</code></strong>,来代表三种身份的权限，此外<strong><code>a</code></strong>则代表<strong>all</strong>全部的身份，读写权限可以写成r、w、x</p><p><strong><code>chmod [u、g、o、a] [+（加入）、-（移除）、=（设置）] [r、w、x] 文件或目录</code></strong></p></li></ul></li></ul><p>  例如要把上面的<strong>test.txt</strong>设置成【-rwxr-xr-x】时：</p><pre><code><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al test.txt</span><br><span class="line">-rwxrwx--- <span class="number">1</span> root root <span class="number">0</span> Mar <span class="number">18</span> <span class="number">00</span>:<span class="number">00</span> test.txt</span><br><span class="line">$ chmod u=rwx,go=rx test.txt</span><br><span class="line">$ ls -al</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root <span class="number">0</span> Mar <span class="number">18</span> <span class="number">00</span>:<span class="number">00</span> test.txt</span><br></pre></td></tr></table></figure></code></pre><p>  如果想为每身份加入w权限</p><pre><code><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ chmod a+w test.txt</span><br><span class="line">$ ls -al test.txt</span><br><span class="line">-rwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> Mar <span class="number">18</span> <span class="number">00</span>:<span class="number">00</span> test.txt</span><br></pre></td></tr></table></figure></code></pre><p>  如果想为每身份移除x权限</p><pre><code><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ chmod a-x test.txt</span><br><span class="line">$ ls -al test.txt</span><br><span class="line">-rw-rw-rw- <span class="number">1</span> root root <span class="number">0</span> Mar <span class="number">18</span> <span class="number">01</span>:<span class="number">49</span> test.txt</span><br></pre></td></tr></table></figure></code></pre><h4 id="Linux目录树"><a href="#Linux目录树" class="headerlink" title="Linux目录树"></a>Linux目录树</h4><h5 id="执行文件路径的变量：-PATH"><a href="#执行文件路径的变量：-PATH" class="headerlink" title="执行文件路径的变量：$PATH"></a>执行文件路径的变量：$PATH</h5><p>PATH这个变量的内容是由一堆目录所组成，每个目录中间用冒号（:）来隔开，每个目录有顺序之分。就像下面的格式</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/sbin:/</span>usr<span class="regexp">/local/</span><span class="string">bin:</span><span class="regexp">/usr/</span><span class="string">sbin:</span><span class="regexp">/usr/</span><span class="string">bin:</span><span class="regexp">/root/</span><span class="string">bin:</span><span class="regexp">/usr/</span>local<span class="regexp">/python37/</span>bin</span><br></pre></td></tr></table></figure><h5 id="目录树的主要特征："><a href="#目录树的主要特征：" class="headerlink" title="目录树的主要特征："></a>目录树的主要特征：</h5><ul><li>目录树的起始点为根目录（/，root）；</li><li>每个目录不止能使用本地区分的文件系统，也可以使用网络的文件系统；</li><li>用NetWork File System(NFS)服务器挂载某特点的目录</li><li>每个文件在此目录树中的文件都是独一无二的；</li></ul><p>下面是目录树构架示意图（关于目录树更详细的说明，参考《鸟哥的Linux私房菜—基础学习篇（第四版）》第五章5.3节的FHS标准说明）</p><p><img src="https://raw.githubusercontent.com/yangshenghua97/Image/master/dirtree.png" alt=""></p><h4 id="绝对路径与相对路径"><a href="#绝对路径与相对路径" class="headerlink" title="绝对路径与相对路径"></a>绝对路径与相对路径</h4><p>根据文件名写法的不同，也可将所谓定义为绝对路径与相对路径。这两种文件名路径写法依据如下：</p><ul><li>绝对路径：由根目录（/）开始写起的文件名或目录名称；</li><li>相对路径：相对于目前所处在的目录的文件名写法，例如：../dir1、../dir1/opt等<ul><li><strong><code>..</code></strong>代表上一层目录，也可以使用<strong><code>../</code></strong>来代表</li><li><strong><code>.</code></strong>代表当前目录，也可以使用<strong><code>./</code></strong>来代表</li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>《鸟哥的Linux私房菜—基础学习篇（第四版）》 鸟哥著 人民邮电出版社</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux文件权限与文件属性&quot;&gt;&lt;a href=&quot;#Linux文件权限与文件属性&quot; class=&quot;headerlink&quot; title=&quot;Linux文件权限与文件属性&quot;&gt;&lt;/a&gt;Linux文件权限与文件属性&lt;/h3&gt;&lt;h4 id=&quot;Linux文件属性&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>初识Linux</title>
    <link href="http://yoursite.com/2019/03/15/Linux/Linux%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/03/15/Linux/Linux%E5%9F%BA%E7%A1%80/</id>
    <published>2019-03-15T14:20:39.000Z</published>
    <updated>2020-03-18T13:45:01.808Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Linux"><a href="#什么是Linux" class="headerlink" title="什么是Linux?"></a>什么是Linux?</h3><p>Linux就是一个操作系统(手动狗头)</p><h3 id="Linux几个常用的命令"><a href="#Linux几个常用的命令" class="headerlink" title="Linux几个常用的命令"></a>Linux几个常用的命令</h3><ul><li><p><strong><code>cd dir</code></strong>：跳转到指定文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">跳转到root目录</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~</span></span><br><span class="line">跳转到之前目录</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> -</span></span><br><span class="line">跳转到上级目录</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ..</span></span><br></pre></td></tr></table></figure><p>cd 后面还可以文件夹绝对路径或相对路径跳转到指定目录</p><p>例如跳转到 <strong>/</strong>下的<strong>tmp</strong>目录</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">cd</span> <span class="string">/tmp</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>pwd</code></strong>：查看当前所处的路径，输入<strong><code>pwd</code></strong>系统会返回当前所处的目录的绝对路径</p></li><li><p><strong><code>ls -al</code></strong>：列出文件夹下的所有文件，包括隐藏文件</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">ls</span> -<span class="keyword">al</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="操作Linux系统几个重要的热键"><a href="#操作Linux系统几个重要的热键" class="headerlink" title="操作Linux系统几个重要的热键"></a>操作Linux系统几个重要的热键</h3><ul><li><h4 id="Tab-按键"><a href="#Tab-按键" class="headerlink" title="[Tab]按键"></a>[Tab]按键</h4><p><strong><code>[Tab]</code></strong>按键就是在切换大小写按键<strong><code>[Casp Lock]</code></strong>上面的那个按键，它具有命令补全与文件补齐的功能。关键是可以避免打错命令或文件名。</p><p>这里总结一下</p><p><strong>[Tab]接在一串命令的第一个字段后面，则为【命令补全】</strong></p><p><strong>[Tab]接在一串命令的第二个字段后面，则为【文件补全】</strong></p></li><li><h4 id="Ctrl-c-按键"><a href="#Ctrl-c-按键" class="headerlink" title="[Ctrl+c]按键"></a>[Ctrl+c]按键</h4><p>有时候某些命令或程序在系统上一直“跑个不停”，想让命令或程序“停掉”时，可以用这个按键。输入:<strong><code>[Ctrl+c]</code></strong>按键，可以中断目前程序或命令。</p></li><li><h4 id="Ctrl-d"><a href="#Ctrl-d" class="headerlink" title="[Ctrl+d]"></a>[Ctrl+d]</h4><p>如果想要直接离开命令行模式，可以直接按下<strong><code>[Ctrl+d]</code></strong>就能直接离开（相当于输入exit）</p></li><li><h4 id="Shift-Page-Up-、-Shift-Page-Down-按键"><a href="#Shift-Page-Up-、-Shift-Page-Down-按键" class="headerlink" title="[Shift]+{Page Up}、[Shift]+{Page Down}按键"></a>[Shift]+{Page Up}、[Shift]+{Page Down}按键</h4><p>使用<strong><code>[Shift]+{Page Up}</code></strong>向前翻页。使用<strong><code>[Shift]+{Page Down}</code></strong>先后翻页</p><h3 id="正确的关机方法"><a href="#正确的关机方法" class="headerlink" title="正确的关机方法"></a>正确的关机方法</h3></li><li><p>正确的关机命令使用</p><ul><li><p>几个与关机或重启相关命令</p><ul><li>将数据同步写入硬盘的命令：<strong><code>sync</code></strong></li><li>常用的关机命令：<strong><code>shutdown</code></strong></li><li>重启、关机：<strong><code>reboot</code></strong>、<strong><code>halt</code></strong>、<strong><code>poweroff</code></strong></li></ul></li><li><p>数据同步写入磁盘：<strong><code>sync</code></strong></p><p>使用<strong><code>sync</code></strong>命令进行数据的写入操作。在命令行下输入<strong>sync</strong>，那么在内存中尚未被更新的数据，就会被写入硬盘中。So 在关机或重启系统之前最好多执行几次</p></li><li><p>常用的关机命令：<strong><code>shutdown</code></strong></p><p>这个是关闭Linux的命令，如果是root管理员可以使用。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shutdown</span>语法</span><br><span class="line"><span class="built_in">shutdown</span> -[krhc] [时间] [警告信息]</span><br><span class="line"> 选项与参数</span><br><span class="line">   -k：不是真的关机，只是发送警告信息出去。</span><br><span class="line">   -r：在将系统的服务停掉之后就重新启动（常用）</span><br><span class="line">   -h：将系统的服务停掉后，立即关机（常用）</span><br><span class="line">   -c：取消已经进行的<span class="built_in">shutdown</span>命令内容</span><br><span class="line">   时间：指定系统关机的时间，设置时间的样式如下：</span><br><span class="line"> <span class="built_in">shutdown</span> -h <span class="number">13</span>:<span class="number">00</span></span><br><span class="line">系统将在今天的<span class="number">13</span>:<span class="number">00</span>分关机</span><br><span class="line"><span class="built_in">shutdown</span> -h now</span><br><span class="line">系统将立即关机</span><br><span class="line"> <span class="built_in">shutdown</span> -r now</span><br><span class="line">系统会立即重启</span><br></pre></td></tr></table></figure><ul><li><p>shutdown可以完成如下的工作：</p><ul><li>可以自由选择关机模式：要是关机或重启均可；</li></ul></li><li><p>可以设置关机时间：可以设置成现在立即关机，也可以设置某一个特定的时间关机；</p><ul><li>可以自定义关机信息：在关机之前，可以将自己设置的信息发送给在线用户；</li></ul></li><li><p>可以仅发出警告信息：有时有可能要进行一些测试，而不想让其他的用户干扰，或是明白的告诉用户某段时间要注意一下。</p></li><li><p>重启，关机：<strong><code>reboot</code></strong>、<strong><code>halt</code></strong>，<strong><code>poweroff</code></strong></p><p>这三个命令可以进行重启与关机的操作。一般在关机或重启时，都会执行如下命令：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sync</span>;<span class="keyword">sync</span>;<span class="keyword">sync</span>;reboot</span><br></pre></td></tr></table></figure></li><li><p>使用管理管理工具<strong><code>systemctl</code></strong>关机</p><p>在CentOS 7中可以使用<strong><code>systemctl</code></strong>来进行关机，实际上面介绍的关机与重启命令都是调用systemctl这个命令。</p><p>这个命令与关机的语法：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl [命令]</span><br><span class="line">命令项目有：</span><br><span class="line">halt</span><br><span class="line">poweroff</span><br><span class="line">reboot</span><br><span class="line">suspend <span class="comment">//进入休眠模式</span></span><br><span class="line"># systemctl reboot   #系统重启</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>《鸟哥的Linux私房菜—基础学习篇（第四版）》 鸟哥著 人民邮电出版社</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是Linux&quot;&gt;&lt;a href=&quot;#什么是Linux&quot; class=&quot;headerlink&quot; title=&quot;什么是Linux?&quot;&gt;&lt;/a&gt;什么是Linux?&lt;/h3&gt;&lt;p&gt;Linux就是一个操作系统(手动狗头)&lt;/p&gt;
&lt;h3 id=&quot;Linux几个常用的命令
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库</title>
    <link href="http://yoursite.com/2018/04/18/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2018/04/18/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2018-04-18T11:19:50.000Z</published>
    <updated>2020-03-18T13:45:43.115Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
</feed>
